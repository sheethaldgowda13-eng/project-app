<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student-Hub - AI-Powered Student Management</title>
    
    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#4F46E5">
    <meta name="description" content="AI-powered student details management system">
    <link rel="manifest" id="manifest-placeholder">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Chart.js for AI Analytics -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #1e3a8a 0%, #7c3aed 50%, #ec4899 100%);
        }
        .glass-effect {
            backdrop-filter: blur(15px);
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        .ai-glow {
            box-shadow: 0 0 20px rgba(79, 70, 229, 0.3);
        }
        .install-pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        .slide-in {
            animation: slideIn 0.5s ease-out;
        }
        @keyframes slideIn {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <!-- PWA Install Banner -->
    <div id="installBanner" class="fixed top-0 left-0 right-0 z-50 bg-indigo-600 text-white p-4 text-center install-pulse" style="display: none;">
        <div class="flex items-center justify-center space-x-4">
            <i class="fas fa-mobile-alt text-xl"></i>
            <span class="font-semibold">Install Student-Hub on your device for the best experience!</span>
            <button id="installBtn" class="bg-white text-indigo-600 px-4 py-2 rounded-lg font-bold hover:bg-gray-100 transition-colors">
                <i class="fas fa-download mr-2"></i>Install App
            </button>
            <button id="dismissInstall" class="text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Enhanced Mobile Install Popup -->
    <div id="installPopup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
        <div class="bg-white rounded-2xl p-8 max-w-md mx-4 text-center">
            <div class="mb-6">
                <div class="w-20 h-20 bg-indigo-600 rounded-2xl mx-auto mb-4 flex items-center justify-center">
                    <i class="fas fa-graduation-cap text-3xl text-white"></i>
                </div>
                <h3 class="text-2xl font-bold text-gray-800 mb-2">Install Student-Hub</h3>
                <p class="text-gray-600">Get the full app experience on your device</p>
            </div>
            
            <div class="space-y-3 mb-6 text-left">
                <div class="flex items-center space-x-3">
                    <i class="fas fa-check-circle text-green-500"></i>
                    <span class="text-gray-700">Work offline</span>
                </div>
                <div class="flex items-center space-x-3">
                    <i class="fas fa-check-circle text-green-500"></i>
                    <span class="text-gray-700">Fast loading</span>
                </div>
                <div class="flex items-center space-x-3">
                    <i class="fas fa-check-circle text-green-500"></i>
                    <span class="text-gray-700">Home screen access</span>
                </div>
                <div class="flex items-center space-x-3">
                    <i class="fas fa-check-circle text-green-500"></i>
                    <span class="text-gray-700">Push notifications</span>
                </div>
            </div>
            
            <div class="space-y-3">
                <button id="installPopupBtn" class="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg font-bold hover:bg-indigo-700 transition-colors">
                    <i class="fas fa-download mr-2"></i>Install Now
                </button>
                <button id="dismissPopup" class="w-full text-gray-500 hover:text-gray-700 transition-colors">
                    Maybe Later
                </button>
            </div>
        </div>
    </div>

    <!-- Floating Install Button -->
    <div id="floatingInstall" class="fixed bottom-4 right-4 z-40" style="display: none;">
        <button onclick="handleInstall()" class="bg-indigo-600 text-white p-4 rounded-full shadow-lg hover:bg-indigo-700 transition-colors install-pulse">
            <i class="fas fa-download text-xl"></i>
        </button>
    </div>

    <!-- Authentication Section -->
    <div id="authSection" class="container mx-auto px-4 py-8">
        <!-- Welcome Screen -->
        <div id="welcomeScreen" class="text-center mb-8">
            <div class="glass-effect rounded-2xl p-8 ai-glow max-w-md mx-auto">
                <h1 class="text-3xl font-bold text-gray-800 mb-2">
                    <i class="fas fa-graduation-cap mr-3"></i>Student-Hub
                </h1>
                <p class="text-gray-700 text-lg font-semibold mb-2">SREE SIDDRAMESHWARA POLYTECHNIC TIPTUR</p>
                <p class="text-gray-600 text-sm mb-6">Diploma Student Management System</p>
                <div class="space-y-4">
                    <button onclick="showAuthForm('signin')" class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all">
                        <i class="fas fa-sign-in-alt mr-2"></i>Sign In
                    </button>
                    <button onclick="showAuthForm('signup')" class="w-full bg-gradient-to-r from-green-600 to-teal-600 text-white font-bold py-3 px-6 rounded-lg hover:from-green-700 hover:to-teal-700 transition-all">
                        <i class="fas fa-user-plus mr-2"></i>Register
                    </button>
                </div>
            </div>
        </div>

        <!-- Sign In Form -->
        <div id="signinForm" class="glass-effect rounded-xl p-8 max-w-md mx-auto" style="display: none;">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
                <i class="fas fa-sign-in-alt mr-2"></i>Sign In
            </h2>
            
            <form id="loginForm" class="space-y-6">
                <div>
                    <label class="block text-gray-700 font-semibold mb-2">Username *</label>
                    <input type="text" id="loginId" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none" placeholder="Enter your username">
                </div>

                <div>
                    <label class="block text-gray-700 font-semibold mb-2">Password *</label>
                    <input type="password" id="loginPassword" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none" placeholder="Enter your password">
                </div>

                <button type="submit" class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all">
                    <i class="fas fa-sign-in-alt mr-2"></i>Sign In
                </button>
            </form>

            <div class="text-center mt-6">
                <button onclick="showAuthForm('signup')" class="text-blue-300 hover:text-blue-200 underline">
                    Don't have an account? Register here
                </button>
                <br>
                <button onclick="showAuthForm('welcome')" class="text-gray-300 hover:text-gray-200 underline mt-2">
                    Back to Welcome
                </button>
            </div>
        </div>

        <!-- Sign Up Form -->
        <div id="signupForm" class="glass-effect rounded-xl p-8 max-w-2xl mx-auto" style="display: none;">
            <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
                <i class="fas fa-user-plus mr-2"></i>Register New Account
            </h2>
            
            <form id="registerForm" class="space-y-6">
                <div>
                    <label class="block text-gray-700 font-semibold mb-2">Account Type *</label>
                    <select id="accountType" required class="w-full p-3 rounded-lg bg-white text-gray-800 border border-gray-300 focus:border-blue-400 focus:outline-none" onchange="toggleAccountFields()">
                        <option value="">Select Account Type</option>
                        <option value="student">Student</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Full Name *</label>
                        <input type="text" id="regFullName" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none">
                    </div>
                    <div id="registerNumberField">
                        <label class="block text-gray-700 font-semibold mb-2">Username *</label>
                        <input type="text" id="regNumber" class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none" placeholder="e.g., john_doe">
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Email *</label>
                        <input type="email" id="regEmail" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none">
                    </div>
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Phone Number</label>
                        <input type="tel" id="regPhone" class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none">
                    </div>
                </div>

                <div id="studentFields" class="space-y-4" style="display: none;">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-gray-700 font-semibold mb-2">Department *</label>
                            <select id="regDepartment" class="w-full p-3 rounded-lg bg-white text-gray-800 border border-gray-300 focus:border-blue-400 focus:outline-none" onchange="generateRegisterNumber()">
                                <option value="">Select Department</option>
                                <option value="ADFD">ADFD</option>
                                <option value="CSE">CSE</option>
                                <option value="EC">EC</option>
                                <option value="COMPUTER SCIENCE AND ENGINEERING">Computer Science and Engineering</option>
                                <option value="ELECTRICAL AND ELECTRONICS ENGINEERING">Electrical and Electronics Engineering</option>
                                <option value="ELECTRICAL ENGINEERING">Electrical Engineering</option>
                                <option value="CIVIL ENGINEERING">Civil Engineering</option>
                                <option value="MECHANICAL ENGINEERING">Mechanical Engineering</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-semibold mb-2">Year *</label>
                            <select id="regYear" class="w-full p-3 rounded-lg bg-white text-gray-800 border border-gray-300 focus:border-blue-400 focus:outline-none" onchange="generateRegisterNumber()">
                                <option value="">Select Year</option>
                                <option value="1">1st Year</option>
                                <option value="2">2nd Year</option>
                                <option value="3">3rd Year</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-semibold mb-2">Semester *</label>
                            <select id="regSemester" class="w-full p-3 rounded-lg bg-white text-gray-800 border border-gray-300 focus:border-blue-400 focus:outline-none">
                                <option value="">Select Semester</option>
                                <option value="1">1st Semester</option>
                                <option value="2">2nd Semester</option>
                                <option value="3">3rd Semester</option>
                                <option value="4">4th Semester</option>
                                <option value="5">5th Semester</option>
                                <option value="6">6th Semester</option>
                            </select>
                        </div>
                    </div>

                </div>

                <div id="adminFields" class="space-y-4" style="display: none;">
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Role Type *</label>
                        <select id="regRole" class="w-full p-3 rounded-lg bg-white text-gray-800 border border-gray-300 focus:border-blue-400 focus:outline-none">
                            <option value="">Select Role</option>
                            <option value="Teacher">Teacher</option>
                            <option value="HOD">Head of Department (HOD)</option>
                            <option value="Dean">Dean</option>
                            <option value="Principal">Principal</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Password *</label>
                        <input type="password" id="regPassword" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none" minlength="6">
                    </div>
                    <div>
                        <label class="block text-gray-700 font-semibold mb-2">Confirm Password *</label>
                        <input type="password" id="regConfirmPassword" required class="w-full p-3 rounded-lg bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-blue-400 focus:outline-none" minlength="6">
                    </div>
                </div>

                <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-teal-600 text-white font-bold py-3 px-6 rounded-lg hover:from-green-700 hover:to-teal-700 transition-all">
                    <i class="fas fa-user-plus mr-2"></i>Create Account
                </button>
            </form>

            <div class="text-center mt-6">
                <button onclick="showAuthForm('signin')" class="text-blue-300 hover:text-blue-200 underline">
                    Already have an account? Sign in here
                </button>
                <br>
                <button onclick="showAuthForm('welcome')" class="text-gray-300 hover:text-gray-200 underline mt-2">
                    Back to Welcome
                </button>
            </div>
        </div>
    </div>

    <!-- Main Application -->
    <div id="app" class="container mx-auto px-4 py-8" style="display: none;">
        <!-- Header -->
        <header class="text-center mb-8 slide-in">
            <div class="glass-effect rounded-2xl p-6 ai-glow">
                <div class="flex justify-between items-center">
                    <div class="flex-1">
                        <h1 class="text-4xl font-bold text-white mb-2">
                            <i class="fas fa-graduation-cap mr-3"></i>Student-Hub
                        </h1>
                        <p class="text-gray-200 text-lg">SREE SIDDRAMESHWARA POLYTECHNIC TIPTUR</p>
                        <p class="text-gray-300 text-sm">Diploma Student Management System</p>
                        <div class="flex justify-center items-center mt-4 space-x-4">
                            <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm">
                                <i class="fas fa-robot mr-1"></i>AI Enabled
                            </span>
                            <span class="bg-blue-500 text-white px-3 py-1 rounded-full text-sm">
                                <i class="fas fa-brain mr-1"></i>Attendance Tracking
                            </span>
                        </div>
                    </div>
                    <div class="text-right">
                        <p class="text-white font-semibold" id="userWelcome">Welcome!</p>
                        <p class="text-gray-300 text-sm" id="userRole"></p>
                        <button onclick="logout()" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors mt-2">
                            <i class="fas fa-sign-out-alt mr-2"></i>Logout
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Navigation -->
        <nav class="mb-8">
            <div class="glass-effect rounded-xl p-4">
                <div id="adminNav" class="flex flex-wrap justify-center space-x-2 space-y-2">
                    <button onclick="showSection('dashboard')" class="nav-btn bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors cursor-pointer">
                        <i class="fas fa-chart-line mr-2"></i>Dashboard
                    </button>
                    <button onclick="showSection('attendance')" class="nav-btn bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors cursor-pointer">
                        <i class="fas fa-calendar-check mr-2"></i>Attendance
                    </button>
                    <button onclick="showSection('attendanceRequestsAdmin')" class="nav-btn bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors cursor-pointer">
                        <i class="fas fa-clipboard-list mr-2"></i>Attendance Requests
                    </button>
                    <button onclick="showSection('addStudent')" class="nav-btn bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors cursor-pointer">
                        <i class="fas fa-user-plus mr-2"></i>Add Student
                    </button>
                    <button onclick="showSection('viewStudents')" class="nav-btn bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer">
                        <i class="fas fa-users mr-2"></i>View Students
                    </button>
                    <button onclick="showSection('marksManagement')" class="nav-btn bg-teal-600 text-white px-4 py-2 rounded-lg hover:bg-teal-700 transition-colors cursor-pointer">
                        <i class="fas fa-graduation-cap mr-2"></i>Marks Management
                    </button>
                    <button onclick="showSection('studentSearch')" class="nav-btn bg-pink-600 text-white px-4 py-2 rounded-lg hover:bg-pink-700 transition-colors cursor-pointer">
                        <i class="fas fa-search mr-2"></i>Student Search
                    </button>
                    <button onclick="showSection('reports')" class="nav-btn bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors cursor-pointer">
                        <i class="fas fa-chart-bar mr-2"></i>Reports
                    </button>
                </div>
                <div id="studentNav" class="flex flex-wrap justify-center space-x-2 space-y-2" style="display: none;">
                    <button onclick="showSection('studentDashboard')" class="nav-btn bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors cursor-pointer">
                        <i class="fas fa-chart-line mr-2"></i>My Dashboard
                    </button>
                    <button onclick="showSection('myAttendance')" class="nav-btn bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors cursor-pointer">
                        <i class="fas fa-calendar-check mr-2"></i>My Attendance
                    </button>
                    <button onclick="showSection('attendanceRequests')" class="nav-btn bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors cursor-pointer">
                        <i class="fas fa-edit mr-2"></i>Update Attendance
                    </button>
                    <button onclick="showSection('marksEntry')" class="nav-btn bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors cursor-pointer">
                        <i class="fas fa-pencil-alt mr-2"></i>Enter Marks
                    </button>
                    <button onclick="showSection('viewMarks')" class="nav-btn bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors cursor-pointer">
                        <i class="fas fa-chart-bar mr-2"></i>View Marks
                    </button>
                    <button onclick="showSection('profile')" class="nav-btn bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer">
                        <i class="fas fa-user mr-2"></i>Profile
                    </button>
                </div>
            </div>
        </nav>

        <!-- Dashboard Section -->
        <section id="dashboard" class="section">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div class="glass-effect rounded-xl p-6 text-white text-center">
                    <i class="fas fa-users text-3xl mb-3 text-blue-300"></i>
                    <h3 class="text-2xl font-bold" id="totalStudents">0</h3>
                    <p class="text-gray-300">Total Students</p>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center">
                    <i class="fas fa-chart-line text-3xl mb-3 text-green-300"></i>
                    <h3 class="text-2xl font-bold" id="avgGrade">0</h3>
                    <p class="text-gray-300">Average Grade</p>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center">
                    <i class="fas fa-trophy text-3xl mb-3 text-yellow-300"></i>
                    <h3 class="text-2xl font-bold" id="topPerformers">0</h3>
                    <p class="text-gray-300">Top Performers</p>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center">
                    <i class="fas fa-robot text-3xl mb-3 text-purple-300"></i>
                    <h3 class="text-2xl font-bold">AI</h3>
                    <p class="text-gray-300">Predictions Ready</p>
                </div>
            </div>

            <!-- Charts -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-bar mr-2"></i>Grade Distribution
                    </h3>
                    <canvas id="gradeChart"></canvas>
                </div>
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-pie mr-2"></i>Department Breakdown
                    </h3>
                    <canvas id="departmentChart"></canvas>
                </div>
            </div>
        </section>

        <!-- Add Student Section -->
        <section id="addStudent" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-8 max-w-2xl mx-auto">
                <h2 class="text-2xl font-bold text-white mb-6 text-center">
                    <i class="fas fa-user-plus mr-2"></i>Add New Student
                </h2>
                
                <form id="studentForm" class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-white font-semibold mb-2">Full Name *</label>
                            <input type="text" id="fullName" required class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">Student ID *</label>
                            <input type="text" id="studentId" required class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-white font-semibold mb-2">Email *</label>
                            <input type="email" id="email" required class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">Phone</label>
                            <input type="tel" id="phone" class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-white font-semibold mb-2">Department *</label>
                            <select id="department" required class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                                <option value="">Select Department</option>
                                <option value="ADFD">ADFD</option>
                                <option value="CSE">CSE</option>
                                <option value="EC">EC</option>
                                <option value="COMPUTER SCIENCE AND ENGINEERING">Computer Science and Engineering</option>
                                <option value="ELECTRICAL AND ELECTRONICS ENGINEERING">Electrical and Electronics Engineering</option>
                                <option value="ELECTRICAL ENGINEERING">Electrical Engineering</option>
                                <option value="CIVIL ENGINEERING">Civil Engineering</option>
                                <option value="MECHANICAL ENGINEERING">Mechanical Engineering</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">Year *</label>
                            <select id="year" required class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                                <option value="">Select Year</option>
                                <option value="1">1st Year</option>
                                <option value="2">2nd Year</option>
                                <option value="3">3rd Year</option>
                                <option value="4">4th Year</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-white font-semibold mb-2">GPA</label>
                            <input type="number" id="gpa" min="0" max="4" step="0.01" class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        </div>
                    </div>

                    <div>
                        <label class="block text-white font-semibold mb-2">Address</label>
                        <textarea id="address" rows="3" class="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none"></textarea>
                    </div>

                    <!-- AI Prediction -->
                    <div id="aiPrediction" class="bg-purple-600/30 border border-purple-400 rounded-lg p-4" style="display: none;">
                        <h4 class="text-white font-bold mb-2">
                            <i class="fas fa-robot mr-2"></i>AI Prediction
                        </h4>
                        <p id="predictionText" class="text-purple-200"></p>
                    </div>

                    <button type="submit" class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all ai-glow">
                        <i class="fas fa-plus mr-2"></i>Add Student
                    </button>
                </form>
            </div>
        </section>

        <!-- View Students Section -->
        <section id="viewStudents" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <div class="flex flex-col md:flex-row justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-white mb-4 md:mb-0">
                        <i class="fas fa-users mr-2"></i>Student Records
                    </h2>
                    <div class="flex space-x-4">
                        <input type="text" id="searchInput" placeholder="Search students..." class="p-2 rounded-lg bg-white/20 text-white placeholder-gray-300 border border-white/30 focus:border-blue-400 focus:outline-none">
                        <select id="filterDepartment" class="p-2 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                            <option value="">All Departments</option>
                            <option value="ADFD">ADFD</option>
                            <option value="CSE">CSE</option>
                            <option value="EC">EC</option>
                            <option value="COMPUTER SCIENCE AND ENGINEERING">Computer Science and Engineering</option>
                            <option value="ELECTRICAL AND ELECTRONICS ENGINEERING">Electrical and Electronics Engineering</option>
                            <option value="ELECTRICAL ENGINEERING">Electrical Engineering</option>
                            <option value="CIVIL ENGINEERING">Civil Engineering</option>
                            <option value="MECHANICAL ENGINEERING">Mechanical Engineering</option>
                        </select>
                    </div>
                </div>

                <div class="overflow-x-auto">
                    <table class="w-full text-white">
                        <thead>
                            <tr class="border-b border-white/30">
                                <th class="text-left p-3">Name</th>
                                <th class="text-left p-3">ID</th>
                                <th class="text-left p-3">Department</th>
                                <th class="text-left p-3">Year</th>
                                <th class="text-left p-3">GPA</th>
                                <th class="text-left p-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="studentsTable">
                            <!-- Students will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <!-- Attendance Section (Admin) -->
        <section id="attendance" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6 mb-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-calendar-check mr-2"></i>Attendance Management
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Date</label>
                        <input type="date" id="attendanceDate" class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Department</label>
                        <select id="attendanceDepartment" class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                            <option value="">All Departments</option>
                            <option value="ADFD">ADFD</option>
                            <option value="CSE">CSE</option>
                            <option value="EC">EC</option>
                            <option value="COMPUTER SCIENCE AND ENGINEERING">Computer Science and Engineering</option>
                            <option value="ELECTRICAL AND ELECTRONICS ENGINEERING">Electrical and Electronics Engineering</option>
                            <option value="ELECTRICAL ENGINEERING">Electrical Engineering</option>
                            <option value="CIVIL ENGINEERING">Civil Engineering</option>
                            <option value="MECHANICAL ENGINEERING">Mechanical Engineering</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Year</label>
                        <select id="attendanceYear" class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30 focus:border-blue-400 focus:outline-none">
                            <option value="">All Years</option>
                            <option value="1">1st Year</option>
                            <option value="2">2nd Year</option>
                            <option value="3">3rd Year</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="loadAttendanceList()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-search mr-2"></i>Load Students
                        </button>
                    </div>
                </div>

                <div id="attendanceList" class="space-y-4">
                    <!-- Attendance list will be populated here -->
                </div>

                <div class="text-center mt-6 space-x-4">
                    <button onclick="saveAttendance()" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-bold">
                        <i class="fas fa-save mr-2"></i>Save Attendance
                    </button>
                    <button onclick="bulkMarkAttendance('present')" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-bold">
                        <i class="fas fa-check-circle mr-2"></i>Mark All Present
                    </button>
                    <button onclick="bulkMarkAttendance('absent')" class="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors font-bold">
                        <i class="fas fa-times-circle mr-2"></i>Mark All Absent
                    </button>
                </div>
            </div>
        </section>

        <!-- Student Dashboard -->
        <section id="studentDashboard" class="section" style="display: none;">
            <!-- Welcome Banner -->
            <div class="glass-effect rounded-xl p-6 mb-6 text-center">
                <h2 class="text-3xl font-bold mb-2" id="dashboardWelcome">Welcome Back!</h2>
                <p class="text-lg" id="dashboardStudentInfo">Loading your academic overview...</p>
                <div class="flex justify-center items-center mt-4 space-x-4">
                    <span class="bg-blue-500 text-white px-3 py-1 rounded-full text-sm" id="currentSemesterBadge">
                        <i class="fas fa-graduation-cap mr-1"></i>Current Semester
                    </span>
                    <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm" id="academicYearBadge">
                        <i class="fas fa-calendar mr-1"></i>Academic Year 2024
                    </span>
                </div>
            </div>

            <!-- Today's Attendance Section -->
            <div class="glass-effect rounded-xl p-6 mb-6">
                <h3 class="text-xl font-bold mb-4">
                    <i class="fas fa-calendar-day mr-2"></i>Mark Today's Attendance
                </h3>
                <div id="todayAttendanceSection" class="glass-effect rounded-lg p-4 border border-white/30">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="font-semibold text-lg text-white">Today: <span id="todayDate" class="text-blue-300"></span></p>
                            <p class="text-sm text-gray-300" id="todayStatus">Not marked yet</p>
                        </div>
                        <div class="flex space-x-3">
                            <button onclick="markTodayAttendance('present')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                                <i class="fas fa-check mr-2"></i>Present
                            </button>
                            <button onclick="markTodayAttendance('absent')" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                                <i class="fas fa-times mr-2"></i>Absent
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Mark Past Date Attendance -->
                <div class="mt-4 glass-effect rounded-lg p-4 border border-white/30">
                    <h4 class="font-semibold mb-3 text-white">Mark Attendance for Past Date</h4>
                    <div class="flex items-center space-x-3">
                        <input type="date" id="pastDateInput" class="p-2 border rounded-lg bg-white/20 text-white border-white/30 focus:border-blue-400 focus:outline-none" max="">
                        <select id="pastDateStatus" class="p-2 border rounded-lg bg-white/20 text-white border-white/30 focus:border-blue-400 focus:outline-none">
                            <option value="">Select Status</option>
                            <option value="present">Present</option>
                            <option value="absent">Absent</option>
                        </select>
                        <button onclick="markPastDateAttendance()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-save mr-2"></i>Mark
                        </button>
                    </div>
                </div>
            </div>

            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-calendar-check text-3xl mb-3 text-green-300"></i>
                    <h3 class="text-2xl font-bold" id="studentTotalDays">0</h3>
                    <p class="text-gray-300">Total Days</p>
                    <div class="mt-2">
                        <span class="text-xs text-green-200" id="totalDaysChange">+0 this month</span>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-check-circle text-3xl mb-3 text-blue-300"></i>
                    <h3 class="text-2xl font-bold" id="studentPresentDays">0</h3>
                    <p class="text-gray-300">Present Days</p>
                    <div class="mt-2">
                        <span class="text-xs text-blue-200" id="presentDaysChange">+0 this month</span>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-times-circle text-3xl mb-3 text-red-300"></i>
                    <h3 class="text-2xl font-bold" id="studentAbsentDays">0</h3>
                    <p class="text-gray-300">Absent Days</p>
                    <div class="mt-2">
                        <span class="text-xs text-red-200" id="absentDaysChange">+0 this month</span>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-percentage text-3xl mb-3 text-yellow-300"></i>
                    <h3 class="text-2xl font-bold" id="studentAttendancePercentage">0%</h3>
                    <p class="text-gray-300">Attendance %</p>
                    <div class="mt-2">
                        <span class="text-xs" id="attendanceStatus">Good Standing</span>
                    </div>
                </div>
            </div>

            <!-- Academic Performance Overview -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-book text-3xl mb-3 text-purple-300"></i>
                    <h3 class="text-2xl font-bold" id="studentTotalSubjects">0</h3>
                    <p class="text-gray-300">Subjects Completed</p>
                    <div class="mt-2">
                        <span class="text-xs text-purple-200" id="subjectsProgress">Current semester</span>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-chart-line text-3xl mb-3 text-orange-300"></i>
                    <h3 class="text-2xl font-bold" id="studentAverageMarks">0</h3>
                    <p class="text-gray-300">Average Marks</p>
                    <div class="mt-2">
                        <span class="text-xs text-orange-200" id="marksImprovement">Overall performance</span>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 text-white text-center hover:scale-105 transition-transform">
                    <i class="fas fa-trophy text-3xl mb-3 text-gold-300"></i>
                    <h3 class="text-2xl font-bold" id="studentGrade">-</h3>
                    <p class="text-gray-300">Current Grade</p>
                    <div class="mt-2">
                        <span class="text-xs text-yellow-200" id="gradeStatus">Academic standing</span>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="glass-effect rounded-xl p-6 mb-6">
                <h3 class="text-white text-xl font-bold mb-4">
                    <i class="fas fa-bolt mr-2"></i>Quick Actions
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <button onclick="showSection('myAttendance')" class="bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-lg transition-colors text-center">
                        <i class="fas fa-calendar-check text-2xl mb-2"></i>
                        <p class="font-semibold">View Attendance</p>
                        <p class="text-xs opacity-75">Check your records</p>
                    </button>
                    <button onclick="showSection('marksEntry')" class="bg-green-600 hover:bg-green-700 text-white p-4 rounded-lg transition-colors text-center">
                        <i class="fas fa-pencil-alt text-2xl mb-2"></i>
                        <p class="font-semibold">Enter Marks</p>
                        <p class="text-xs opacity-75">Add your scores</p>
                    </button>
                    <button onclick="showSection('viewMarks')" class="bg-purple-600 hover:bg-purple-700 text-white p-4 rounded-lg transition-colors text-center">
                        <i class="fas fa-chart-bar text-2xl mb-2"></i>
                        <p class="font-semibold">View Marks</p>
                        <p class="text-xs opacity-75">See your progress</p>
                    </button>
                    <button onclick="showSection('attendanceRequests')" class="bg-orange-600 hover:bg-orange-700 text-white p-4 rounded-lg transition-colors text-center">
                        <i class="fas fa-edit text-2xl mb-2"></i>
                        <p class="font-semibold">Update Request</p>
                        <p class="text-xs opacity-75">Request changes</p>
                    </button>
                </div>
            </div>

            <!-- Recent Activity & Notifications -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-bell mr-2"></i>Recent Notifications
                    </h3>
                    <div id="studentNotifications" class="space-y-3">
                        <!-- Notifications will be populated here -->
                    </div>
                </div>
                
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-clock mr-2"></i>Recent Activity
                    </h3>
                    <div id="studentRecentActivity" class="space-y-3">
                        <!-- Recent activity will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-line mr-2"></i>Monthly Attendance Trend
                    </h3>
                    <canvas id="studentAttendanceChart"></canvas>
                </div>
                
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-bar mr-2"></i>Academic Performance
                    </h3>
                    <canvas id="studentPerformanceChart"></canvas>
                </div>
            </div>
        </section>

        <!-- My Attendance Section (Student) -->
        <section id="myAttendance" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6 mb-6">
                <h2 class="text-2xl font-bold mb-6">
                    <i class="fas fa-calendar-check mr-2"></i>My Attendance Record
                </h2>
                
                <!-- Today's Attendance Quick Mark -->
                <div class="glass-effect rounded-lg p-4 mb-6 border border-white/30">
                    <h3 class="font-bold text-lg mb-3 text-white">
                        <i class="fas fa-calendar-day mr-2"></i>Today's Attendance
                    </h3>
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="font-semibold text-white">Date: <span id="todayDateMyAttendance" class="text-blue-300"></span></p>
                            <p class="text-sm text-gray-300" id="todayStatusMyAttendance">Not marked yet</p>
                        </div>
                        <div class="flex space-x-3">
                            <button onclick="markTodayAttendanceFromMyAttendance('present')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                                <i class="fas fa-check mr-2"></i>Present
                            </button>
                            <button onclick="markTodayAttendanceFromMyAttendance('absent')" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                                <i class="fas fa-times mr-2"></i>Absent
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Quick Stats -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div class="bg-blue-600/30 rounded-lg p-4 text-center">
                        <i class="fas fa-calendar text-2xl mb-2 text-blue-300"></i>
                        <h3 class="text-xl font-bold text-white" id="myTotalDays">0</h3>
                        <p class="text-blue-200">Total Days</p>
                    </div>
                    <div class="bg-green-600/30 rounded-lg p-4 text-center">
                        <i class="fas fa-check-circle text-2xl mb-2 text-green-300"></i>
                        <h3 class="text-xl font-bold text-white" id="myPresentDays">0</h3>
                        <p class="text-green-200">Present Days</p>
                    </div>
                    <div class="bg-red-600/30 rounded-lg p-4 text-center">
                        <i class="fas fa-times-circle text-2xl mb-2 text-red-300"></i>
                        <h3 class="text-xl font-bold text-white" id="myAbsentDays">0</h3>
                        <p class="text-red-200">Absent Days</p>
                    </div>
                    <div class="bg-yellow-600/30 rounded-lg p-4 text-center">
                        <i class="fas fa-percentage text-2xl mb-2 text-yellow-300"></i>
                        <h3 class="text-xl font-bold text-white" id="myAttendancePercent">0%</h3>
                        <p class="text-yellow-200">Attendance %</p>
                    </div>
                </div>
                
                <!-- Filters -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Month</label>
                        <select id="studentAttendanceMonth" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">All Months</option>
                            <option value="1" class="bg-gray-800 text-white">January</option>
                            <option value="2" class="bg-gray-800 text-white">February</option>
                            <option value="3" class="bg-gray-800 text-white">March</option>
                            <option value="4" class="bg-gray-800 text-white">April</option>
                            <option value="5" class="bg-gray-800 text-white">May</option>
                            <option value="6" class="bg-gray-800 text-white">June</option>
                            <option value="7" class="bg-gray-800 text-white">July</option>
                            <option value="8" class="bg-gray-800 text-white">August</option>
                            <option value="9" class="bg-gray-800 text-white">September</option>
                            <option value="10" class="bg-gray-800 text-white">October</option>
                            <option value="11" class="bg-gray-800 text-white">November</option>
                            <option value="12" class="bg-gray-800 text-white">December</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Year</label>
                        <select id="studentAttendanceYear" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="2024" class="bg-gray-800 text-white">2024</option>
                            <option value="2023" class="bg-gray-800 text-white">2023</option>
                            <option value="2022" class="bg-gray-800 text-white">2022</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Status Filter</label>
                        <select id="attendanceStatusFilter" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">All Status</option>
                            <option value="present" class="bg-gray-800 text-white">Present Only</option>
                            <option value="absent" class="bg-gray-800 text-white">Absent Only</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="loadStudentAttendance()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-search mr-2"></i>Load Records
                        </button>
                    </div>
                </div>

                <!-- View Toggle -->
                <div class="flex justify-center mb-6">
                    <div class="bg-white/10 rounded-lg p-1 flex">
                        <button id="calendarViewBtn" onclick="toggleAttendanceView('calendar')" class="px-4 py-2 rounded bg-blue-600 text-white transition-colors">
                            <i class="fas fa-calendar-alt mr-2"></i>Calendar View
                        </button>
                        <button id="listViewBtn" onclick="toggleAttendanceView('list')" class="px-4 py-2 rounded text-white hover:bg-white/10 transition-colors">
                            <i class="fas fa-list mr-2"></i>List View
                        </button>
                        <button id="chartViewBtn" onclick="toggleAttendanceView('chart')" class="px-4 py-2 rounded text-white hover:bg-white/10 transition-colors">
                            <i class="fas fa-chart-line mr-2"></i>Chart View
                        </button>
                    </div>
                </div>

                <!-- Attendance Display -->
                <div id="studentAttendanceRecords">
                    <!-- Student attendance records will be populated here -->
                </div>
            </div>
            
            <!-- Attendance Analytics -->
            <div class="glass-effect rounded-xl p-6">
                <h3 class="text-xl font-bold text-white mb-4">
                    <i class="fas fa-chart-bar mr-2"></i>Attendance Analytics
                </h3>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                        <canvas id="monthlyAttendanceTrend"></canvas>
                    </div>
                    <div>
                        <canvas id="weeklyAttendancePattern"></canvas>
                    </div>
                </div>
            </div>
        </section>

        <!-- Student Attendance Request Section -->
        <section id="attendanceRequests" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-edit mr-2"></i>Update My Attendance
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Date</label>
                        <input type="date" id="requestDate" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Current Status</label>
                        <select id="currentStatus" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">Select Current Status</option>
                            <option value="absent" class="bg-gray-800 text-white">Absent</option>
                            <option value="present" class="bg-gray-800 text-white">Present</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Requested Status</label>
                        <select id="requestedStatus" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">Select Requested Status</option>
                            <option value="present" class="bg-gray-800 text-white">Present</option>
                            <option value="absent" class="bg-gray-800 text-white">Absent</option>
                        </select>
                    </div>
                </div>
                
                <div class="mb-6">
                    <label class="block text-white font-semibold mb-2">Reason for Request</label>
                    <textarea id="requestReason" rows="4" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" placeholder="Please provide a detailed reason for this attendance update request..."></textarea>
                </div>
                
                <div class="text-center mb-6">
                    <button onclick="submitAttendanceRequest()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-bold">
                        <i class="fas fa-paper-plane mr-2"></i>Submit Request
                    </button>
                </div>
                
                <div class="glass-effect rounded-lg p-4">
                    <h3 class="text-white text-lg font-bold mb-4">My Attendance Requests</h3>
                    <div id="myAttendanceRequests">
                        <!-- Student's attendance requests will be populated here -->
                    </div>
                </div>
            </div>
        </section>

        <!-- Student Marks Entry Section -->
        <section id="marksEntry" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-pencil-alt mr-2"></i>Enter My Marks
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Semester</label>
                        <select id="marksSemester" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" onchange="loadSubjectsForMarks()">
                            <option value="" class="bg-gray-800 text-white">Select Semester</option>
                            <option value="1" class="bg-gray-800 text-white">1st Semester</option>
                            <option value="2" class="bg-gray-800 text-white">2nd Semester</option>
                            <option value="3" class="bg-gray-800 text-white">3rd Semester</option>
                            <option value="4" class="bg-gray-800 text-white">4th Semester</option>
                            <option value="5" class="bg-gray-800 text-white">5th Semester</option>
                            <option value="6" class="bg-gray-800 text-white">6th Semester</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Subject</label>
                        <select id="marksSubject" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">Select Subject</option>
                        </select>
                    </div>
                </div>
                
                <div id="marksEntryForm" class="space-y-6" style="display: none;">
                    <!-- Internals -->
                    <div class="glass-effect rounded-lg p-4 border border-blue-400/30">
                        <h3 class="text-white text-lg font-bold mb-4">Internal Marks (5 Internals)</h3>
                        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Internal 1</label>
                                <input type="number" id="internal1" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div>
                                <label class="block text-white font-semibold mb-2">Internal 2</label>
                                <input type="number" id="internal2" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div>
                                <label class="block text-white font-semibold mb-2">Internal 3</label>
                                <input type="number" id="internal3" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div>
                                <label class="block text-white font-semibold mb-2">Internal 4</label>
                                <input type="number" id="internal4" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div>
                                <label class="block text-white font-semibold mb-2">Internal 5</label>
                                <input type="number" id="internal5" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Skill Tests -->
                    <div class="glass-effect rounded-lg p-4 border border-yellow-400/30">
                        <h3 class="text-white text-lg font-bold mb-4">Skill Tests</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Skill Test 1</label>
                                <input type="number" id="skillTest1" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div>
                                <label class="block text-white font-semibold mb-2">Skill Test 2</label>
                                <input type="number" id="skillTest2" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Final Exam -->
                    <div class="glass-effect rounded-lg p-4 border border-purple-400/30">
                        <h3 class="text-white text-lg font-bold mb-4">Final Exam</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-white font-semibold mb-2">Final Exam Marks</label>
                                <input type="number" id="finalExam" min="0" max="100" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            </div>
                            <div class="flex items-end">
                                <button onclick="saveMarks()" class="w-full bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors font-bold">
                                    <i class="fas fa-save mr-2"></i>Save Marks
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Student View Marks Section -->
        <section id="viewMarks" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-chart-bar mr-2"></i>My Marks Report
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Semester</label>
                        <select id="viewMarksSemester" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" onchange="loadStudentMarks()">
                            <option value="" class="bg-gray-800 text-white">Select Semester</option>
                            <option value="1" class="bg-gray-800 text-white">1st Semester</option>
                            <option value="2" class="bg-gray-800 text-white">2nd Semester</option>
                            <option value="3" class="bg-gray-800 text-white">3rd Semester</option>
                            <option value="4" class="bg-gray-800 text-white">4th Semester</option>
                            <option value="5" class="bg-gray-800 text-white">5th Semester</option>
                            <option value="6" class="bg-gray-800 text-white">6th Semester</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="loadStudentMarks()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-search mr-2"></i>Load Marks
                        </button>
                    </div>
                </div>
                
                <div id="studentMarksDisplay">
                    <!-- Student marks will be displayed here -->
                </div>
            </div>
        </section>

        <!-- Admin Attendance Requests Section -->
        <section id="attendanceRequestsAdmin" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-clipboard-list mr-2"></i>Attendance Update Requests
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Status Filter</label>
                        <select id="requestStatusFilter" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" onchange="loadAttendanceRequests()">
                            <option value="" class="bg-gray-800 text-white">All Requests</option>
                            <option value="pending" class="bg-gray-800 text-white">Pending Review</option>
                            <option value="under_review" class="bg-gray-800 text-white">Under Review</option>
                            <option value="approved" class="bg-gray-800 text-white">Approved</option>
                            <option value="rejected" class="bg-gray-800 text-white">Rejected</option>
                            <option value="reverted" class="bg-gray-800 text-white">Reverted</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Department Filter</label>
                        <select id="requestDepartmentFilter" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" onchange="loadAttendanceRequests()">
                            <option value="" class="bg-gray-800 text-white">All Departments</option>
                            <option value="ADFD" class="bg-gray-800 text-white">ADFD</option>
                            <option value="CSE" class="bg-gray-800 text-white">CSE</option>
                            <option value="EC" class="bg-gray-800 text-white">EC</option>
                            <option value="COMPUTER SCIENCE AND ENGINEERING" class="bg-gray-800 text-white">Computer Science and Engineering</option>
                            <option value="ELECTRICAL AND ELECTRONICS ENGINEERING" class="bg-gray-800 text-white">Electrical and Electronics Engineering</option>
                            <option value="ELECTRICAL ENGINEERING" class="bg-gray-800 text-white">Electrical Engineering</option>
                            <option value="CIVIL ENGINEERING" class="bg-gray-800 text-white">Civil Engineering</option>
                            <option value="MECHANICAL ENGINEERING" class="bg-gray-800 text-white">Mechanical Engineering</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="loadAttendanceRequests()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-refresh mr-2"></i>Refresh
                        </button>
                    </div>
                </div>
                
                <div id="attendanceRequestsList" class="space-y-4">
                    <!-- Attendance requests will be populated here -->
                </div>
            </div>
        </section>

        <!-- Student Search Section (Admin) -->
        <section id="studentSearch" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-search mr-2"></i>Student Search & Details
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Search by Register Number</label>
                        <input type="text" id="searchRegNumber" class="w-full p-3 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50" placeholder="e.g., 485CS23054">
                    </div>
                    <div class="flex items-end">
                        <button onclick="searchStudentByRegNumber()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-search mr-2"></i>Search Student
                        </button>
                    </div>
                </div>
                
                <div id="studentSearchResults">
                    <!-- Search results will be displayed here -->
                </div>
            </div>
        </section>

        <!-- Admin Marks Management Section -->
        <section id="marksManagement" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6">
                    <i class="fas fa-graduation-cap mr-2"></i>Marks Management
                </h2>
                
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Department</label>
                        <select id="marksManagementDept" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">All Departments</option>
                            <option value="ADFD" class="bg-gray-800 text-white">ADFD</option>
                            <option value="CSE" class="bg-gray-800 text-white">CSE</option>
                            <option value="EC" class="bg-gray-800 text-white">EC</option>
                            <option value="COMPUTER SCIENCE AND ENGINEERING" class="bg-gray-800 text-white">Computer Science and Engineering</option>
                            <option value="ELECTRICAL AND ELECTRONICS ENGINEERING" class="bg-gray-800 text-white">Electrical and Electronics Engineering</option>
                            <option value="ELECTRICAL ENGINEERING" class="bg-gray-800 text-white">Electrical Engineering</option>
                            <option value="CIVIL ENGINEERING" class="bg-gray-800 text-white">Civil Engineering</option>
                            <option value="MECHANICAL ENGINEERING" class="bg-gray-800 text-white">Mechanical Engineering</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Year</label>
                        <select id="marksManagementYear" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">All Years</option>
                            <option value="1" class="bg-gray-800 text-white">1st Year</option>
                            <option value="2" class="bg-gray-800 text-white">2nd Year</option>
                            <option value="3" class="bg-gray-800 text-white">3rd Year</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Semester</label>
                        <select id="marksManagementSemester" class="w-full p-3 rounded-lg bg-gray-800/50 text-white border border-white/30 focus:border-blue-400 focus:outline-none focus:bg-gray-700/50">
                            <option value="" class="bg-gray-800 text-white">All Semesters</option>
                            <option value="1" class="bg-gray-800 text-white">1st Semester</option>
                            <option value="2" class="bg-gray-800 text-white">2nd Semester</option>
                            <option value="3" class="bg-gray-800 text-white">3rd Semester</option>
                            <option value="4" class="bg-gray-800 text-white">4th Semester</option>
                            <option value="5" class="bg-gray-800 text-white">5th Semester</option>
                            <option value="6" class="bg-gray-800 text-white">6th Semester</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="loadMarksManagement()" class="w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-search mr-2"></i>Load Students
                        </button>
                    </div>
                </div>
                
                <div id="marksManagementList">
                    <!-- Marks management list will be populated here -->
                </div>
            </div>
        </section>

        <!-- Profile Section (Student) -->
        <section id="profile" class="section" style="display: none;">
            <div class="glass-effect rounded-xl p-8 max-w-2xl mx-auto">
                <h2 class="text-2xl font-bold text-white mb-6 text-center">
                    <i class="fas fa-user mr-2"></i>My Profile
                </h2>
                
                <div id="studentProfile" class="space-y-6">
                    <!-- Student profile will be populated here -->
                </div>
            </div>
        </section>

        <!-- Reports Section (Admin) -->
        <section id="reports" class="section" style="display: none;">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-pie mr-2"></i>Department-wise Attendance
                    </h3>
                    <canvas id="departmentAttendanceChart"></canvas>
                </div>
                <div class="glass-effect rounded-xl p-6">
                    <h3 class="text-white text-xl font-bold mb-4">
                        <i class="fas fa-chart-bar mr-2"></i>Monthly Attendance Trends
                    </h3>
                    <canvas id="monthlyAttendanceChart"></canvas>
                </div>
            </div>

            <div class="glass-effect rounded-xl p-6">
                <h3 class="text-white text-xl font-bold mb-4">
                    <i class="fas fa-exclamation-triangle mr-2"></i>Low Attendance Alerts
                </h3>
                <div id="lowAttendanceAlerts" class="space-y-4">
                    <!-- Low attendance alerts will be populated here -->
                </div>
            </div>
        </section>
    </div>

    <!-- Success/Error Messages -->
    <div id="messageContainer" class="fixed top-20 right-4 z-40"></div>

    <script>
        // PWA Installation
        let deferredPrompt;
        const installBanner = document.getElementById('installBanner');
        const installBtn = document.getElementById('installBtn');
        const dismissInstall = document.getElementById('dismissInstall');
        const installPopup = document.getElementById('installPopup');
        const installPopupBtn = document.getElementById('installPopupBtn');
        const dismissPopup = document.getElementById('dismissPopup');
        const floatingInstall = document.getElementById('floatingInstall');

        // Generate PWA Manifest dynamically
        const manifest = {
            name: "Student-Hub - AI Student Management",
            short_name: "Student-Hub",
            description: "AI-powered student details management system",
            start_url: "/",
            display: "standalone",
            background_color: "#4F46E5",
            theme_color: "#4F46E5",
            orientation: "portrait",
            categories: ["education", "productivity"],
            icons: [
                {
                    src: "data:image/svg+xml;base64," + btoa(`
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="#4F46E5">
                            <path d="M320 96H192L144.6 24.9C137.5 14.2 145.1 0 157.9 0H354.1C366.9 0 374.5 14.2 367.4 24.9L320 96zM192 128H320C373 128 416 171 416 224V448C416 483.3 387.3 512 352 512H160C124.7 512 96 483.3 96 448V224C96 171 139 128 192 128zM256 256C238.3 256 224 270.3 224 288C224 305.7 238.3 320 256 320C273.7 320 288 305.7 288 288C288 270.3 273.7 256 256 256z"/>
                        </svg>
                    `),
                    sizes: "512x512",
                    type: "image/svg+xml"
                },
                {
                    src: "data:image/svg+xml;base64," + btoa(`
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 192" fill="#4F46E5">
                            <path d="M320 96H192L144.6 24.9C137.5 14.2 145.1 0 157.9 0H354.1C366.9 0 374.5 14.2 367.4 24.9L320 96zM192 128H320C373 128 416 171 416 224V448C416 483.3 387.3 512 352 512H160C124.7 512 96 483.3 96 448V224C96 171 139 128 192 128zM256 256C238.3 256 224 270.3 224 288C224 305.7 238.3 320 256 320C273.7 320 288 305.7 288 288C288 270.3 273.7 256 256 256z"/>
                        </svg>
                    `),
                    sizes: "192x192",
                    type: "image/svg+xml"
                }
            ]
        };

        const manifestBlob = new Blob([JSON.stringify(manifest)], {type: 'application/json'});
        const manifestURL = URL.createObjectURL(manifestBlob);
        document.getElementById('manifest-placeholder').href = manifestURL;

        // Check if device is mobile
        function isMobileDevice() {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        }

        // Show install popup
        function showInstallPopup() {
            installPopup.style.display = 'flex';
        }

        // Hide install popup
        function hideInstallPopup() {
            installPopup.style.display = 'none';
        }

        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            
            if (isMobileDevice()) {
                // Show enhanced popup for mobile
                setTimeout(() => {
                    showInstallPopup();
                }, 3000);
            } else {
                // Show banner for desktop
                installBanner.style.display = 'block';
            }
            
            // Show floating button
            floatingInstall.style.display = 'block';
        });

        // Install button handlers
        async function handleInstall() {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                if (outcome === 'accepted') {
                    showMessage('Student-Hub installed successfully! Check your home screen.', 'success');
                    hideInstallPopup();
                    installBanner.style.display = 'none';
                    floatingInstall.style.display = 'none';
                } else {
                    showMessage('Installation cancelled. You can install later using the floating button.', 'info');
                }
                deferredPrompt = null;
            } else {
                // Fallback instructions for browsers that don't support PWA
                showInstallInstructions();
            }
        }

        function showInstallInstructions() {
            const instructions = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-2xl p-8 max-w-md mx-4">
                        <h3 class="text-xl font-bold text-gray-800 mb-4">Install Student-Hub</h3>
                        <div class="space-y-3 text-sm text-gray-600">
                            <p><strong>For Chrome/Edge:</strong></p>
                            <p>1. Click the menu (⋮) in the top right</p>
                            <p>2. Select "Install Student-Hub"</p>
                            <p><strong>For Safari (iOS):</strong></p>
                            <p>1. Tap the share button</p>
                            <p>2. Select "Add to Home Screen"</p>
                            <p><strong>For Firefox:</strong></p>
                            <p>1. Tap the menu (☰)</p>
                            <p>2. Select "Install"</p>
                        </div>
                        <button onclick="this.parentElement.parentElement.remove()" class="w-full mt-4 bg-indigo-600 text-white py-2 rounded-lg">
                            Got it!
                        </button>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', instructions);
        }

        installBtn.addEventListener('click', handleInstall);
        installPopupBtn.addEventListener('click', handleInstall);

        dismissInstall.addEventListener('click', () => {
            installBanner.style.display = 'none';
        });

        dismissPopup.addEventListener('click', () => {
            hideInstallPopup();
            // Show floating button as alternative
            floatingInstall.style.display = 'block';
        });

        // Auto-show install prompt on mobile after some time
        setTimeout(() => {
            if (isMobileDevice() && !localStorage.getItem('installPromptShown')) {
                showInstallPopup();
                localStorage.setItem('installPromptShown', 'true');
            } else if (!isMobileDevice()) {
                // Show banner for desktop
                installBanner.style.display = 'block';
            }
        }, 3000);
        
        // Always show floating button after some time
        setTimeout(() => {
            if (!localStorage.getItem('installDismissed')) {
                floatingInstall.style.display = 'block';
            }
        }, 10000);

        // Application Logic
        let students = JSON.parse(localStorage.getItem('students')) || [];
        let users = JSON.parse(localStorage.getItem('users')) || [];
        let attendance = JSON.parse(localStorage.getItem('attendance')) || [];
        let attendanceRequests = JSON.parse(localStorage.getItem('attendanceRequests')) || [];
        let studentMarks = JSON.parse(localStorage.getItem('studentMarks')) || [];
        let currentUser = JSON.parse(localStorage.getItem('currentUser')) || null;
        let currentSection = 'dashboard';

        // Diploma Subjects by Semester
        const diplomaSubjects = {
            1: [
                'Fundamental of computer',
                'Maths',
                'IT skills',
                'Statistical analysis',
                'Environmental EVS'
            ],
            2: [
                'Subject 1 (2nd Sem)',
                'Subject 2 (2nd Sem)',
                'Subject 3 (2nd Sem)',
                'Subject 4 (2nd Sem)',
                'Subject 5 (2nd Sem)'
            ],
            3: [
                'Computer Hardware maintenance and administration',
                'Python',
                'Computer network',
                'Database management system',
                'Kannada'
            ],
            4: [
                'Software engineering principles and practice',
                'Data structure in python',
                'Java',
                'Operating system',
                'Indian constitution'
            ],
            5: [
                'AI and ML'
            ],
            6: [
                'Project'
            ]
        };

        // Authentication Functions
        function showAuthForm(formType) {
            document.getElementById('welcomeScreen').style.display = formType === 'welcome' ? 'block' : 'none';
            document.getElementById('signinForm').style.display = formType === 'signin' ? 'block' : 'none';
            document.getElementById('signupForm').style.display = formType === 'signup' ? 'block' : 'none';
        }

        function toggleAccountFields() {
            const accountType = document.getElementById('accountType').value;
            const studentFields = document.getElementById('studentFields');
            const adminFields = document.getElementById('adminFields');
            const registerNumberField = document.getElementById('registerNumberField');
            
            if (accountType === 'student') {
                studentFields.style.display = 'block';
                adminFields.style.display = 'none';
                registerNumberField.querySelector('label').textContent = 'Username *';
                registerNumberField.querySelector('input').placeholder = 'e.g., john_doe';
                registerNumberField.querySelector('input').required = true;
            } else if (accountType === 'admin') {
                studentFields.style.display = 'none';
                adminFields.style.display = 'block';
                registerNumberField.querySelector('label').textContent = 'Username *';
                registerNumberField.querySelector('input').placeholder = 'e.g., admin_user';
                registerNumberField.querySelector('input').required = true;
            } else {
                studentFields.style.display = 'none';
                adminFields.style.display = 'none';
                registerNumberField.querySelector('input').required = false;
            }
        }

        function generateRegisterNumber(department, year) {
            if (!department || !year) return null;
            
            // Department code mapping
            const deptCodes = {
                'ADFD': 'AD',
                'CSE': 'CS',
                'EC': 'EC',
                'COMPUTER SCIENCE AND ENGINEERING': 'CS',
                'ELECTRICAL AND ELECTRONICS ENGINEERING': 'EE',
                'ELECTRICAL ENGINEERING': 'EL',
                'CIVIL ENGINEERING': 'CE',
                'MECHANICAL ENGINEERING': 'ME'
            };
            
            const deptCode = deptCodes[department] || 'XX';
            
            // Calculate year suffix based on current year and student year
            const currentYear = new Date().getFullYear();
            const admissionYear = currentYear - (parseInt(year) - 1);
            const yearSuffix = admissionYear.toString().slice(-2);
            
            // Count existing students in same department and admission year to generate unique number
            const existingCount = students.filter(s => {
                if (!s.studentId) return false;
                const studentYearSuffix = s.studentId.substring(5, 7);
                const studentDeptCode = s.studentId.substring(3, 5);
                return studentDeptCode === deptCode && studentYearSuffix === yearSuffix;
            }).length;
            
            // Generate register number: 485 + DeptCode + YearSuffix + Serial (e.g., 485CS2301)
            const serial = (existingCount + 1).toString().padStart(2, '0');
            return `485${deptCode}${yearSuffix}${serial}`;
        }

        // Login Form Handler
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('loginId').value.trim();
            const password = document.getElementById('loginPassword').value;
            
            // Validate login fields
            if (!username) {
                showMessage('Please enter your username', 'error');
                return;
            }
            
            if (!password) {
                showMessage('Please enter your password', 'error');
                return;
            }
            
            // Find user by username
            const user = users.find(u => u.username === username && u.password === password);
            
            if (user) {
                currentUser = user;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                
                // Show main app
                document.getElementById('authSection').style.display = 'none';
                document.getElementById('app').style.display = 'block';
                
                // Update UI based on user role
                updateUserInterface();
                
                showMessage(`Welcome back, ${user.fullName}!`, 'success');
            } else {
                showMessage('Invalid username or password! Try: admin/admin123 or rahul_kumar/student123', 'error');
            }
        });

        // Register Form Handler
        document.getElementById('registerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                id: Date.now(),
                accountType: document.getElementById('accountType').value,
                fullName: document.getElementById('regFullName').value.trim(),
                username: document.getElementById('regNumber').value.trim(),
                email: document.getElementById('regEmail').value.trim(),
                phone: document.getElementById('regPhone').value.trim(),
                password: document.getElementById('regPassword').value,
                confirmPassword: document.getElementById('regConfirmPassword').value,
                dateCreated: new Date().toISOString()
            };

            // Add student-specific fields
            if (formData.accountType === 'student') {
                formData.department = document.getElementById('regDepartment').value;
                formData.year = document.getElementById('regYear').value;
                formData.semester = document.getElementById('regSemester').value;
                formData.registerNumber = generateRegisterNumber(formData.department, formData.year);
            } else if (formData.accountType === 'admin') {
                formData.role = document.getElementById('regRole').value;
            }

            // Validation
            if (!validateRegistration(formData)) return;

            // Check for duplicate username
            if (users.some(u => u.username === formData.username)) {
                showMessage('Username already exists!', 'error');
                return;
            }

            // Remove confirm password before saving
            delete formData.confirmPassword;

            users.push(formData);
            localStorage.setItem('users', JSON.stringify(users));
            
            // If student, also add to students array
            if (formData.accountType === 'student') {
                const studentData = {
                    id: formData.id,
                    fullName: formData.fullName,
                    studentId: formData.registerNumber,
                    username: formData.username,
                    email: formData.email,
                    phone: formData.phone,
                    department: formData.department,
                    year: formData.year,
                    semester: formData.semester,
                    gpa: 0,
                    address: '',
                    dateAdded: formData.dateCreated
                };
                students.push(studentData);
                localStorage.setItem('students', JSON.stringify(students));
            }
            
            showMessage('Account created successfully! Please sign in.', 'success');
            showAuthForm('signin');
            document.getElementById('registerForm').reset();
        });

        function validateRegistration(data) {
            // Account type validation
            if (!data.accountType) {
                showMessage('Please select an account type', 'error');
                return false;
            }
            
            // Full name validation
            if (!data.fullName || data.fullName.trim().length < 2) {
                showMessage('Please enter a valid full name (at least 2 characters)', 'error');
                return false;
            }
            
            if (!/^[a-zA-Z\s]+$/.test(data.fullName.trim())) {
                showMessage('Full name should contain only letters and spaces', 'error');
                return false;
            }
            
            // Username validation
            if (!data.username || data.username.trim().length < 3) {
                showMessage('Please enter a valid username (at least 3 characters)', 'error');
                return false;
            }
            
            if (!/^[a-zA-Z0-9_]+$/.test(data.username.trim())) {
                showMessage('Username should contain only letters, numbers, and underscores', 'error');
                return false;
            }
            
            // Email validation
            if (!data.email || !isValidEmail(data.email)) {
                showMessage('Please enter a valid email address', 'error');
                return false;
            }
            
            // Phone validation (if provided)
            if (data.phone && data.phone.trim()) {
                if (!/^[0-9]{10}$/.test(data.phone.trim())) {
                    showMessage('Please enter a valid 10-digit phone number', 'error');
                    return false;
                }
            }
            
            // Password validation
            if (!data.password || data.password.length < 6) {
                showMessage('Password must be at least 6 characters long', 'error');
                return false;
            }
            
            if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(data.password)) {
                showMessage('Password must contain at least one uppercase letter, one lowercase letter, and one number', 'error');
                return false;
            }
            
            if (data.password !== data.confirmPassword) {
                showMessage('Passwords do not match', 'error');
                return false;
            }
            
            // Validate student-specific fields
            if (data.accountType === 'student') {
                if (!data.department) {
                    showMessage('Please select a department', 'error');
                    return false;
                }
                
                if (!data.year) {
                    showMessage('Please select a year', 'error');
                    return false;
                }
                
                if (!data.semester) {
                    showMessage('Please select a semester', 'error');
                    return false;
                }
            }
            
            // Validate admin-specific fields
            if (data.accountType === 'admin') {
                if (!data.role) {
                    showMessage('Please select a role type', 'error');
                    return false;
                }
            }
            
            return true;
        }

        function validateRegisterNumber(regNumber, year) {
            // Basic validation for diploma register number format
            // Should start with year (e.g., 21, 22, 23) followed by department code
            const currentYear = new Date().getFullYear();
            const yearPrefix = regNumber.substring(0, 2);
            
            // Check if year prefix is reasonable (last 10 years)
            const validYears = [];
            for (let i = 0; i < 10; i++) {
                validYears.push(((currentYear - i) % 100).toString().padStart(2, '0'));
            }
            
            return validYears.includes(yearPrefix) && regNumber.length >= 6;
        }

        function updateUserInterface() {
            if (!currentUser) return;
            
            document.getElementById('userWelcome').textContent = `Welcome, ${currentUser.fullName}!`;
            document.getElementById('userRole').textContent = currentUser.accountType === 'admin' ? 'Administrator' : 'Student';
            
            if (currentUser.accountType === 'admin') {
                document.getElementById('adminNav').style.display = 'flex';
                document.getElementById('studentNav').style.display = 'none';
                showSection('dashboard');
            } else {
                document.getElementById('adminNav').style.display = 'none';
                document.getElementById('studentNav').style.display = 'flex';
                showSection('studentDashboard');
            }
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('currentUser');
            
            document.getElementById('authSection').style.display = 'block';
            document.getElementById('app').style.display = 'none';
            
            showAuthForm('welcome');
            showMessage('Logged out successfully!', 'success');
        }

        // Attendance Management Functions
        function loadAttendanceList() {
            const date = document.getElementById('attendanceDate').value;
            const department = document.getElementById('attendanceDepartment').value;
            const year = document.getElementById('attendanceYear').value;
            
            if (!date) {
                showMessage('Please select a date', 'error');
                return;
            }
            
            let filteredStudents = students.filter(student => {
                let matches = true;
                if (department) matches = matches && student.department === department;
                if (year) matches = matches && student.year === year;
                return matches;
            });
            
            const attendanceList = document.getElementById('attendanceList');
            
            if (filteredStudents.length === 0) {
                attendanceList.innerHTML = '<p class="text-white text-center">No students found for the selected criteria.</p>';
                return;
            }
            
            attendanceList.innerHTML = filteredStudents.map(student => {
                const existingAttendance = attendance.find(a => 
                    a.studentId === student.studentId && 
                    a.date === date
                );
                
                return `
                    <div class="glass-effect rounded-lg p-4 flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center">
                                <i class="fas fa-user text-white"></i>
                            </div>
                            <div>
                                <h4 class="text-white font-semibold">${student.fullName}</h4>
                                <p class="text-gray-300 text-sm">${student.studentId} - ${student.department}</p>
                                <p class="text-gray-400 text-xs">Year ${student.year}, Semester ${student.semester}</p>
                            </div>
                        </div>
                        <div class="flex space-x-4">
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="radio" name="attendance_${student.id}" value="present" 
                                       ${existingAttendance?.status === 'present' ? 'checked' : ''}
                                       class="text-green-600 focus:ring-green-500">
                                <span class="text-green-400 font-semibold">Present</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="radio" name="attendance_${student.id}" value="absent"
                                       ${existingAttendance?.status === 'absent' ? 'checked' : ''}
                                       class="text-red-600 focus:ring-red-500">
                                <span class="text-red-400 font-semibold">Absent</span>
                            </label>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        function saveAttendance() {
            const date = document.getElementById('attendanceDate').value;
            
            if (!date) {
                showMessage('Please select a date', 'error');
                return;
            }
            
            const attendanceInputs = document.querySelectorAll('input[type="radio"]:checked');
            let savedCount = 0;
            
            attendanceInputs.forEach(input => {
                const studentId = input.name.replace('attendance_', '');
                const student = students.find(s => s.id == studentId);
                
                if (student) {
                    // Remove existing attendance for this date and student
                    attendance = attendance.filter(a => 
                        !(a.studentId === student.studentId && a.date === date)
                    );
                    
                    // Add new attendance record
                    attendance.push({
                        id: Date.now() + Math.random(),
                        studentId: student.studentId,
                        studentName: student.fullName,
                        department: student.department,
                        year: student.year,
                        semester: student.semester,
                        date: date,
                        status: input.value,
                        markedBy: currentUser.username,
                        timestamp: new Date().toISOString()
                    });
                    
                    savedCount++;
                }
            });
            
            localStorage.setItem('attendance', JSON.stringify(attendance));
            showMessage(`Attendance saved for ${savedCount} students`, 'success');
            
            // Auto-refresh the list to show updated status
            setTimeout(() => {
                loadAttendanceList();
            }, 1000);
        }
        
        function bulkMarkAttendance(status) {
            const date = document.getElementById('attendanceDate').value;
            
            if (!date) {
                showMessage('Please select a date first', 'error');
                return;
            }
            
            const department = document.getElementById('attendanceDepartment').value;
            const year = document.getElementById('attendanceYear').value;
            
            let filteredStudents = students.filter(student => {
                let matches = true;
                if (department) matches = matches && student.department === department;
                if (year) matches = matches && student.year === year;
                return matches;
            });
            
            if (filteredStudents.length === 0) {
                showMessage('No students found for bulk marking', 'error');
                return;
            }
            
            filteredStudents.forEach(student => {
                // Remove existing attendance for this date and student
                attendance = attendance.filter(a => 
                    !(a.studentId === student.studentId && a.date === date)
                );
                
                // Add new attendance record
                attendance.push({
                    id: Date.now() + Math.random(),
                    studentId: student.studentId,
                    studentName: student.fullName,
                    department: student.department,
                    year: student.year,
                    semester: student.semester,
                    date: date,
                    status: status,
                    markedBy: currentUser.username,
                    timestamp: new Date().toISOString()
                });
            });
            
            localStorage.setItem('attendance', JSON.stringify(attendance));
            showMessage(`Bulk marked ${filteredStudents.length} students as ${status}`, 'success');
            
            // Refresh the attendance list
            loadAttendanceList();
        }
        
        // Enhanced Student Attendance Functions
        let currentAttendanceView = 'calendar';
        
        function loadStudentAttendance() {
            if (currentUser.accountType !== 'student') return;
            
            const month = document.getElementById('studentAttendanceMonth').value;
            const year = document.getElementById('studentAttendanceYear').value;
            const statusFilter = document.getElementById('attendanceStatusFilter').value;
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            // Get filtered attendance data
            let studentAttendance = attendance.filter(a => {
                if (a.studentId !== student.studentId) return false;
                
                const attendanceDate = new Date(a.date);
                let matches = true;
                
                if (month) matches = matches && (attendanceDate.getMonth() + 1 == month);
                if (year) matches = matches && (attendanceDate.getFullYear() == year);
                if (statusFilter) matches = matches && (a.status === statusFilter);
                
                return matches;
            });
            
            // Update quick stats
            updateMyAttendanceStats(student.studentId);
            
            const container = document.getElementById('studentAttendanceRecords');
            
            if (studentAttendance.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No attendance records found for the selected criteria.</p>';
                return;
            }
            
            // Display based on current view
            if (currentAttendanceView === 'calendar') {
                displayCalendarView(studentAttendance, month, year, container);
            } else if (currentAttendanceView === 'list') {
                displayListView(studentAttendance, container);
            } else if (currentAttendanceView === 'chart') {
                displayChartView(studentAttendance, container);
            }
            
            // Update analytics charts
            updateAttendanceAnalytics(student.studentId);
        }
        
        function updateMyAttendanceStats(studentId) {
            const studentAttendance = attendance.filter(a => a.studentId === studentId);
            const presentDays = studentAttendance.filter(a => a.status === 'present').length;
            const absentDays = studentAttendance.filter(a => a.status === 'absent').length;
            const totalDays = presentDays + absentDays;
            const percentage = totalDays > 0 ? ((presentDays / totalDays) * 100).toFixed(1) : 0;
            
            // Update stats
            document.getElementById('myTotalDays').textContent = totalDays;
            document.getElementById('myPresentDays').textContent = presentDays;
            document.getElementById('myAbsentDays').textContent = absentDays;
            document.getElementById('myAttendancePercent').textContent = percentage + '%';
        }
        
        function toggleAttendanceView(view) {
            currentAttendanceView = view;
            
            // Update button styles
            document.getElementById('calendarViewBtn').className = 'px-4 py-2 rounded text-white hover:bg-white/10 transition-colors';
            document.getElementById('listViewBtn').className = 'px-4 py-2 rounded text-white hover:bg-white/10 transition-colors';
            document.getElementById('chartViewBtn').className = 'px-4 py-2 rounded text-white hover:bg-white/10 transition-colors';
            
            document.getElementById(view + 'ViewBtn').className = 'px-4 py-2 rounded bg-blue-600 text-white transition-colors';
            
            // Reload attendance with new view
            loadStudentAttendance();
        }
        
        function displayCalendarView(studentAttendance, month, year, container) {
            if (!month || !year) {
                container.innerHTML = '<p class="text-white text-center">Please select month and year for calendar view.</p>';
                return;
            }
            
            const attendanceByDate = {};
            studentAttendance.forEach(record => {
                attendanceByDate[record.date] = record;
            });
            
            const daysInMonth = new Date(year, month, 0).getDate();
            let calendarHTML = '<div class="glass-effect rounded-lg p-4 border border-white/30"><h4 class="text-white font-bold mb-4 text-center">Calendar View</h4>';
            calendarHTML += '<div class="grid grid-cols-7 gap-2 mb-4">';
            
            // Calendar headers
            const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayHeaders.forEach(day => {
                calendarHTML += `<div class="text-center text-white font-semibold p-2 bg-blue-600/50 rounded border border-white/20">${day}</div>`;
            });
            
            // Get first day of month
            const firstDay = new Date(year, month - 1, 1).getDay();
            
            // Empty cells for days before month starts
            for (let i = 0; i < firstDay; i++) {
                calendarHTML += '<div class="p-2"></div>';
            }
            
            // Days of month
            for (let day = 1; day <= daysInMonth; day++) {
                const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                const record = attendanceByDate[dateStr];
                let statusClass = 'bg-gray-600/70 border-gray-400';
                let statusIcon = 'fas fa-question';
                let tooltip = 'No record';
                
                if (record) {
                    if (record.status === 'present') {
                        statusClass = 'bg-green-600/80 border-green-400';
                        statusIcon = 'fas fa-check';
                        tooltip = 'Present';
                    } else if (record.status === 'absent') {
                        statusClass = 'bg-red-600/80 border-red-400';
                        statusIcon = 'fas fa-times';
                        tooltip = 'Absent';
                    }
                }
                
                calendarHTML += `
                    <div class="text-center p-3 rounded ${statusClass} text-white cursor-pointer hover:scale-105 transition-transform border" title="${tooltip} - ${dateStr}">
                        <div class="text-sm font-semibold">${day}</div>
                        <i class="${statusIcon} text-xs mt-1"></i>
                    </div>
                `;
            }
            
            calendarHTML += '</div></div>';
            
            // Add summary
            const presentDays = studentAttendance.filter(a => a.status === 'present').length;
            const absentDays = studentAttendance.filter(a => a.status === 'absent').length;
            const totalDays = presentDays + absentDays;
            const percentage = totalDays > 0 ? ((presentDays / totalDays) * 100).toFixed(1) : 0;
            
            calendarHTML += `
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
                    <div class="glass-effect rounded-lg p-4 text-center border border-blue-400/30">
                        <h4 class="text-white font-bold text-lg">${totalDays}</h4>
                        <p class="text-blue-200">Total Days</p>
                    </div>
                    <div class="glass-effect rounded-lg p-4 text-center border border-green-400/30">
                        <h4 class="text-white font-bold text-lg">${presentDays}</h4>
                        <p class="text-green-200">Present</p>
                    </div>
                    <div class="glass-effect rounded-lg p-4 text-center border border-red-400/30">
                        <h4 class="text-white font-bold text-lg">${absentDays}</h4>
                        <p class="text-red-200">Absent</p>
                    </div>
                    <div class="glass-effect rounded-lg p-4 text-center border border-yellow-400/30">
                        <h4 class="text-white font-bold text-lg">${percentage}%</h4>
                        <p class="text-yellow-200">Attendance</p>
                    </div>
                </div>
            `;
            
            container.innerHTML = calendarHTML;
        }
        
        function displayListView(studentAttendance, container) {
            // Sort by date (newest first)
            const sortedAttendance = studentAttendance.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            let listHTML = '<div class="glass-effect rounded-lg p-4 border border-white/30"><h4 class="text-white font-bold mb-4">List View</h4>';
            listHTML += '<div class="overflow-x-auto"><table class="w-full text-white">';
            listHTML += `
                <thead>
                    <tr class="border-b border-white/30 bg-white/10">
                        <th class="text-left p-3 text-white font-semibold">Date</th>
                        <th class="text-left p-3 text-white font-semibold">Day</th>
                        <th class="text-left p-3 text-white font-semibold">Status</th>
                        <th class="text-left p-3 text-white font-semibold">Marked By</th>
                        <th class="text-left p-3 text-white font-semibold">Time</th>
                    </tr>
                </thead>
                <tbody>
            `;
            
            sortedAttendance.forEach(record => {
                const date = new Date(record.date);
                const dayName = date.toLocaleDateString('en-US', { weekday: 'long' });
                const statusClass = record.status === 'present' ? 'bg-green-600/80' : 'bg-red-600/80';
                const statusIcon = record.status === 'present' ? 'fas fa-check' : 'fas fa-times';
                
                listHTML += `
                    <tr class="border-b border-white/20 hover:bg-white/10 transition-colors">
                        <td class="p-3 text-white">${record.date}</td>
                        <td class="p-3 text-gray-300">${dayName}</td>
                        <td class="p-3">
                            <span class="${statusClass} text-white px-3 py-1 rounded-full text-sm font-semibold border border-white/20">
                                <i class="${statusIcon} mr-1"></i>${record.status}
                            </span>
                        </td>
                        <td class="p-3 text-gray-300">${record.markedBy}</td>
                        <td class="p-3 text-gray-300">${new Date(record.timestamp).toLocaleString()}</td>
                    </tr>
                `;
            });
            
            listHTML += '</tbody></table></div></div>';
            container.innerHTML = listHTML;
        }
        
        function displayChartView(studentAttendance, container) {
            let chartHTML = '<div class="glass-effect rounded-lg p-4 border border-white/30"><h4 class="text-white font-bold mb-4">Chart View</h4>';
            chartHTML += '<canvas id="attendanceChartView" width="400" height="200"></canvas></div>';
            
            container.innerHTML = chartHTML;
            
            // Create chart
            setTimeout(() => {
                const ctx = document.getElementById('attendanceChartView').getContext('2d');
                
                // Group by month
                const monthlyData = {};
                studentAttendance.forEach(record => {
                    const date = new Date(record.date);
                    const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
                    
                    if (!monthlyData[monthKey]) {
                        monthlyData[monthKey] = { present: 0, absent: 0 };
                    }
                    
                    monthlyData[monthKey][record.status]++;
                });
                
                const labels = Object.keys(monthlyData).sort();
                const presentData = labels.map(month => monthlyData[month].present);
                const absentData = labels.map(month => monthlyData[month].absent);
                
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels.map(label => {
                            const [year, month] = label.split('-');
                            return new Date(year, month - 1).toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
                        }),
                        datasets: [{
                            label: 'Present',
                            data: presentData,
                            backgroundColor: 'rgba(34, 197, 94, 0.8)',
                            borderColor: 'rgba(34, 197, 94, 1)',
                            borderWidth: 1
                        }, {
                            label: 'Absent',
                            data: absentData,
                            backgroundColor: 'rgba(239, 68, 68, 0.8)',
                            borderColor: 'rgba(239, 68, 68, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                labels: {
                                    color: 'white'
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    color: 'white'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            x: {
                                ticks: {
                                    color: 'white'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            }
                        }
                    }
                });
            }, 100);
        }
        
        function updateAttendanceAnalytics(studentId) {
            // Update monthly trend chart
            updateMonthlyAttendanceTrend(studentId);
            // Update weekly pattern chart
            updateWeeklyAttendancePattern(studentId);
        }
        
        function updateMonthlyAttendanceTrend(studentId) {
            const ctx = document.getElementById('monthlyAttendanceTrend').getContext('2d');
            
            const studentAttendance = attendance.filter(a => a.studentId === studentId);
            const currentYear = new Date().getFullYear();
            const monthlyData = [];
            
            for (let month = 1; month <= 12; month++) {
                const monthAttendance = studentAttendance.filter(a => {
                    const attendanceDate = new Date(a.date);
                    return attendanceDate.getMonth() + 1 === month &&
                           attendanceDate.getFullYear() === currentYear;
                });
                
                const presentDays = monthAttendance.filter(a => a.status === 'present').length;
                const totalDays = monthAttendance.length;
                const percentage = totalDays > 0 ? (presentDays / totalDays) * 100 : 0;
                
                monthlyData.push(percentage);
            }
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [{
                        label: 'Attendance %',
                        data: monthlyData,
                        borderColor: 'rgba(34, 197, 94, 1)',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        function updateWeeklyAttendancePattern(studentId) {
            const ctx = document.getElementById('weeklyAttendancePattern').getContext('2d');
            
            const studentAttendance = attendance.filter(a => a.studentId === studentId);
            const weeklyData = [0, 0, 0, 0, 0, 0, 0]; // Sunday to Saturday
            const weeklyCounts = [0, 0, 0, 0, 0, 0, 0];
            
            studentAttendance.forEach(record => {
                const date = new Date(record.date);
                const dayOfWeek = date.getDay();
                
                weeklyCounts[dayOfWeek]++;
                if (record.status === 'present') {
                    weeklyData[dayOfWeek]++;
                }
            });
            
            // Calculate percentages
            const weeklyPercentages = weeklyData.map((present, index) => {
                const total = weeklyCounts[index];
                return total > 0 ? (present / total) * 100 : 0;
            });
            
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    datasets: [{
                        label: 'Attendance Pattern',
                        data: weeklyPercentages,
                        borderColor: 'rgba(59, 130, 246, 1)',
                        backgroundColor: 'rgba(59, 130, 246, 0.2)',
                        pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(59, 130, 246, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            angleLines: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            pointLabels: {
                                color: 'white'
                            }
                        }
                    }
                }
            });
        }
        
        function updateStudentDashboard() {
            if (currentUser.accountType !== 'student') return;
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            // Update welcome banner
            updateDashboardWelcome(student);
            
            // Update today's attendance section
            updateTodayAttendanceSection(student);
            
            // Update attendance stats
            updateDashboardAttendanceStats(student);
            
            // Update academic performance
            updateDashboardAcademicStats(student);
            
            // Update notifications and activity
            updateDashboardNotifications(student);
            updateDashboardActivity(student);
            
            // Update charts
            updateStudentAttendanceChart();
            updateStudentPerformanceChart(student);
        }
        
        function updateTodayAttendanceSection(student) {
            const today = new Date().toISOString().split('T')[0];
            const todayFormatted = new Date().toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            document.getElementById('todayDate').textContent = todayFormatted;
            
            // Set max date for past date input to today
            document.getElementById('pastDateInput').max = today;
            
            // Check if today's attendance is already marked
            const todayAttendance = attendance.find(a => 
                a.studentId === student.studentId && a.date === today
            );
            
            const statusElement = document.getElementById('todayStatus');
            if (todayAttendance) {
                statusElement.textContent = `Already marked: ${todayAttendance.status}`;
                statusElement.className = `text-sm ${todayAttendance.status === 'present' ? 'text-green-600' : 'text-red-600'}`;
            } else {
                statusElement.textContent = 'Not marked yet';
                statusElement.className = 'text-sm text-gray-600';
            }
        }
        
        function markTodayAttendance(status) {
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            const today = new Date().toISOString().split('T')[0];
            
            // Check if already marked
            const existingAttendance = attendance.find(a => 
                a.studentId === student.studentId && a.date === today
            );
            
            if (existingAttendance) {
                if (confirm(`You have already marked attendance as ${existingAttendance.status} for today. Do you want to update it to ${status}?`)) {
                    // Update existing record
                    existingAttendance.status = status;
                    existingAttendance.timestamp = new Date().toISOString();
                    existingAttendance.markedBy = 'self';
                    existingAttendance.selfMarked = true;
                    
                    localStorage.setItem('attendance', JSON.stringify(attendance));
                    showMessage(`Attendance updated to ${status} for today!`, 'success');
                    updateTodayAttendanceSection(student);
                }
                return;
            }
            
            // Create new attendance record
            const attendanceRecord = {
                id: Date.now() + Math.random(),
                studentId: student.studentId,
                studentName: student.fullName,
                department: student.department,
                year: student.year,
                semester: student.semester,
                date: today,
                status: status,
                markedBy: 'self',
                timestamp: new Date().toISOString(),
                selfMarked: true
            };
            
            attendance.push(attendanceRecord);
            localStorage.setItem('attendance', JSON.stringify(attendance));
            
            showMessage(`Attendance marked as ${status} for today!`, 'success');
            updateTodayAttendanceSection(student);
            updateDashboardAttendanceStats(student);
        }
        
        function markPastDateAttendance() {
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            const date = document.getElementById('pastDateInput').value;
            const status = document.getElementById('pastDateStatus').value;
            
            if (!date || !status) {
                showMessage('Please select both date and status', 'error');
                return;
            }
            
            const today = new Date().toISOString().split('T')[0];
            if (date > today) {
                showMessage('Cannot mark attendance for future dates', 'error');
                return;
            }
            
            // Check if already marked
            const existingAttendance = attendance.find(a => 
                a.studentId === student.studentId && a.date === date
            );
            
            if (existingAttendance) {
                if (confirm(`You have already marked attendance as ${existingAttendance.status} for ${date}. Do you want to update it to ${status}?`)) {
                    // Update existing record
                    existingAttendance.status = status;
                    existingAttendance.timestamp = new Date().toISOString();
                    existingAttendance.markedBy = 'self';
                    existingAttendance.selfMarked = true;
                    
                    localStorage.setItem('attendance', JSON.stringify(attendance));
                    showMessage(`Attendance updated to ${status} for ${date}!`, 'success');
                }
                return;
            }
            
            // Create new attendance record
            const attendanceRecord = {
                id: Date.now() + Math.random(),
                studentId: student.studentId,
                studentName: student.fullName,
                department: student.department,
                year: student.year,
                semester: student.semester,
                date: date,
                status: status,
                markedBy: 'self',
                timestamp: new Date().toISOString(),
                selfMarked: true
            };
            
            attendance.push(attendanceRecord);
            localStorage.setItem('attendance', JSON.stringify(attendance));
            
            showMessage(`Attendance marked as ${status} for ${date}!`, 'success');
            
            // Clear form
            document.getElementById('pastDateInput').value = '';
            document.getElementById('pastDateStatus').value = '';
            
            updateDashboardAttendanceStats(student);
        }
        
        function markTodayAttendanceFromMyAttendance(status) {
            markTodayAttendance(status);
            
            // Update My Attendance section
            const student = students.find(s => s.username === currentUser.username);
            if (student) {
                updateMyAttendanceTodaySection(student);
                loadStudentAttendance();
            }
        }
        
        function updateMyAttendanceTodaySection(student) {
            const today = new Date().toISOString().split('T')[0];
            const todayFormatted = new Date().toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });
            
            document.getElementById('todayDateMyAttendance').textContent = todayFormatted;
            
            // Check if today's attendance is already marked
            const todayAttendance = attendance.find(a => 
                a.studentId === student.studentId && a.date === today
            );
            
            const statusElement = document.getElementById('todayStatusMyAttendance');
            if (todayAttendance) {
                statusElement.textContent = `Already marked: ${todayAttendance.status}`;
                statusElement.className = `text-sm ${todayAttendance.status === 'present' ? 'text-green-600' : 'text-red-600'}`;
            } else {
                statusElement.textContent = 'Not marked yet';
                statusElement.className = 'text-sm text-gray-600';
            }
        }
        
        function updateDashboardWelcome(student) {
            const now = new Date();
            const hour = now.getHours();
            let greeting = 'Good Morning';
            
            if (hour >= 12 && hour < 17) greeting = 'Good Afternoon';
            else if (hour >= 17) greeting = 'Good Evening';
            
            document.getElementById('dashboardWelcome').textContent = `${greeting}, ${student.fullName.split(' ')[0]}!`;
            document.getElementById('dashboardStudentInfo').textContent = `${student.department} - Year ${student.year}, Semester ${student.semester}`;
            document.getElementById('currentSemesterBadge').innerHTML = `<i class="fas fa-graduation-cap mr-1"></i>Semester ${student.semester}`;
        }
        
        function updateDashboardAttendanceStats(student) {
            const studentAttendance = attendance.filter(a => a.studentId === student.studentId);
            const presentDays = studentAttendance.filter(a => a.status === 'present').length;
            const absentDays = studentAttendance.filter(a => a.status === 'absent').length;
            const totalDays = presentDays + absentDays;
            const percentage = totalDays > 0 ? ((presentDays / totalDays) * 100).toFixed(1) : 0;
            
            // Calculate this month's changes
            const thisMonth = new Date().toISOString().slice(0, 7);
            const thisMonthAttendance = studentAttendance.filter(a => a.date.startsWith(thisMonth));
            const thisMonthPresent = thisMonthAttendance.filter(a => a.status === 'present').length;
            const thisMonthAbsent = thisMonthAttendance.filter(a => a.status === 'absent').length;
            const thisMonthTotal = thisMonthAttendance.length;
            
            // Update dashboard cards
            document.getElementById('studentTotalDays').textContent = totalDays;
            document.getElementById('studentPresentDays').textContent = presentDays;
            document.getElementById('studentAbsentDays').textContent = absentDays;
            document.getElementById('studentAttendancePercentage').textContent = percentage + '%';
            
            // Update change indicators
            document.getElementById('totalDaysChange').textContent = `+${thisMonthTotal} this month`;
            document.getElementById('presentDaysChange').textContent = `+${thisMonthPresent} this month`;
            document.getElementById('absentDaysChange').textContent = `+${thisMonthAbsent} this month`;
            
            // Update attendance status
            let status = 'Good Standing';
            let statusClass = 'text-green-200';
            
            if (percentage < 75) {
                status = 'Below Required';
                statusClass = 'text-red-200';
            } else if (percentage < 85) {
                status = 'Needs Improvement';
                statusClass = 'text-yellow-200';
            } else if (percentage >= 95) {
                status = 'Excellent';
                statusClass = 'text-green-200';
            }
            
            const statusElement = document.getElementById('attendanceStatus');
            statusElement.textContent = status;
            statusElement.className = `text-xs ${statusClass}`;
        }
        
        function updateDashboardAcademicStats(student) {
            const myMarks = studentMarks.filter(m => m.studentId === student.studentId);
            const totalSubjects = myMarks.length;
            const averageMarks = totalSubjects > 0 ? 
                (myMarks.reduce((sum, m) => sum + m.totalMarks, 0) / totalSubjects).toFixed(2) : 0;
            
            // Calculate current semester subjects
            const currentSemesterMarks = myMarks.filter(m => m.semester === student.semester);
            const currentSemesterSubjects = currentSemesterMarks.length;
            
            // Calculate grade
            let grade = '-';
            let gradeStatus = 'No data available';
            
            if (averageMarks > 0) {
                if (averageMarks >= 90) {
                    grade = 'A+';
                    gradeStatus = 'Outstanding';
                } else if (averageMarks >= 80) {
                    grade = 'A';
                    gradeStatus = 'Excellent';
                } else if (averageMarks >= 70) {
                    grade = 'B+';
                    gradeStatus = 'Very Good';
                } else if (averageMarks >= 60) {
                    grade = 'B';
                    gradeStatus = 'Good';
                } else if (averageMarks >= 50) {
                    grade = 'C';
                    gradeStatus = 'Satisfactory';
                } else if (averageMarks >= 40) {
                    grade = 'D';
                    gradeStatus = 'Needs Improvement';
                } else {
                    grade = 'F';
                    gradeStatus = 'Failing';
                }
            }
            
            // Update academic performance cards
            document.getElementById('studentTotalSubjects').textContent = totalSubjects;
            document.getElementById('studentAverageMarks').textContent = averageMarks;
            document.getElementById('studentGrade').textContent = grade;
            
            // Update progress indicators
            document.getElementById('subjectsProgress').textContent = `${currentSemesterSubjects} in current semester`;
            document.getElementById('marksImprovement').textContent = totalSubjects > 0 ? 'Overall performance' : 'No marks entered';
            document.getElementById('gradeStatus').textContent = gradeStatus;
        }
        
        function updateDashboardNotifications(student) {
            const notifications = [];
            
            // Attendance notifications
            const studentAttendance = attendance.filter(a => a.studentId === student.studentId);
            const presentDays = studentAttendance.filter(a => a.status === 'present').length;
            const totalDays = studentAttendance.length;
            const percentage = totalDays > 0 ? (presentDays / totalDays) * 100 : 0;
            
            if (percentage < 75 && totalDays > 0) {
                notifications.push({
                    type: 'warning',
                    icon: 'fas fa-exclamation-triangle',
                    title: 'Low Attendance Alert',
                    message: `Your attendance is ${percentage.toFixed(1)}%. Minimum required is 75%.`,
                    time: 'Now'
                });
            }
            
            // Marks notifications
            const myMarks = studentMarks.filter(m => m.studentId === student.studentId);
            const currentSemesterSubjects = diplomaSubjects[student.semester] || [];
            const enteredSubjects = myMarks.filter(m => m.semester === student.semester).length;
            
            if (enteredSubjects < currentSemesterSubjects.length) {
                const pending = currentSemesterSubjects.length - enteredSubjects;
                notifications.push({
                    type: 'info',
                    icon: 'fas fa-pencil-alt',
                    title: 'Pending Marks Entry',
                    message: `You have ${pending} subject(s) with pending marks entry.`,
                    time: 'Today'
                });
            }
            
            // Request status notifications
            const myRequests = attendanceRequests.filter(r => r.studentId === student.studentId);
            const pendingRequests = myRequests.filter(r => r.status === 'pending').length;
            
            if (pendingRequests > 0) {
                notifications.push({
                    type: 'info',
                    icon: 'fas fa-clock',
                    title: 'Pending Requests',
                    message: `You have ${pendingRequests} attendance request(s) pending approval.`,
                    time: 'Recent'
                });
            }
            
            // Recent approvals/rejections
            const recentProcessed = myRequests
                .filter(r => r.status !== 'pending' && r.processedAt)
                .sort((a, b) => new Date(b.processedAt) - new Date(a.processedAt))
                .slice(0, 2);
            
            recentProcessed.forEach(req => {
                notifications.push({
                    type: req.status === 'approved' ? 'success' : 'error',
                    icon: req.status === 'approved' ? 'fas fa-check-circle' : 'fas fa-times-circle',
                    title: `Request ${req.status}`,
                    message: `Your attendance request for ${req.date} was ${req.status}.`,
                    time: new Date(req.processedAt).toLocaleDateString()
                });
            });
            
            // Display notifications
            const container = document.getElementById('studentNotifications');
            
            if (notifications.length === 0) {
                container.innerHTML = '<p class="text-gray-400 text-center">No new notifications</p>';
                return;
            }
            
            container.innerHTML = notifications.slice(0, 5).map(notif => {
                const colorClass = {
                    'warning': 'text-yellow-400 bg-yellow-600/20 border-yellow-400',
                    'info': 'text-blue-400 bg-blue-600/20 border-blue-400',
                    'success': 'text-green-400 bg-green-600/20 border-green-400',
                    'error': 'text-red-400 bg-red-600/20 border-red-400'
                }[notif.type];
                
                return `
                    <div class="flex items-start space-x-3 p-3 ${colorClass} rounded-lg border">
                        <i class="${notif.icon} mt-1"></i>
                        <div class="flex-1">
                            <h4 class="font-semibold text-sm">${notif.title}</h4>
                            <p class="text-xs opacity-90">${notif.message}</p>
                            <span class="text-xs opacity-75">${notif.time}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        function updateDashboardActivity(student) {
            const activities = [];
            
            // Recent marks entries
            const recentMarks = studentMarks
                .filter(m => m.studentId === student.studentId)
                .sort((a, b) => new Date(b.enteredAt) - new Date(a.enteredAt))
                .slice(0, 3);
            
            recentMarks.forEach(mark => {
                activities.push({
                    type: 'marks',
                    icon: 'fas fa-graduation-cap',
                    message: `Entered marks for ${mark.subject}`,
                    time: new Date(mark.enteredAt),
                    details: `Total: ${mark.totalMarks.toFixed(2)}`
                });
            });
            
            // Recent attendance requests
            const recentRequests = attendanceRequests
                .filter(r => r.studentId === student.studentId)
                .sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt))
                .slice(0, 2);
            
            recentRequests.forEach(req => {
                activities.push({
                    type: 'request',
                    icon: 'fas fa-edit',
                    message: `Submitted attendance request`,
                    time: new Date(req.submittedAt),
                    details: `For ${req.date} - ${req.status}`
                });
            });
            
            // Recent attendance (last 5 days)
            const recentAttendance = attendance
                .filter(a => a.studentId === student.studentId)
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 3);
            
            recentAttendance.forEach(att => {
                activities.push({
                    type: 'attendance',
                    icon: att.status === 'present' ? 'fas fa-check-circle' : 'fas fa-times-circle',
                    message: `Marked ${att.status}`,
                    time: new Date(att.timestamp),
                    details: `Date: ${att.date}`
                });
            });
            
            // Sort all activities by time
            activities.sort((a, b) => b.time - a.time);
            
            const container = document.getElementById('studentRecentActivity');
            
            if (activities.length === 0) {
                container.innerHTML = '<p class="text-gray-400 text-center">No recent activity</p>';
                return;
            }
            
            container.innerHTML = activities.slice(0, 5).map(activity => {
                const colorClass = {
                    'marks': 'text-purple-400',
                    'request': 'text-orange-400',
                    'attendance': activity.icon.includes('check') ? 'text-green-400' : 'text-red-400'
                }[activity.type];
                
                return `
                    <div class="flex items-start space-x-3 p-3 bg-white/5 rounded-lg">
                        <i class="${activity.icon} ${colorClass} mt-1"></i>
                        <div class="flex-1">
                            <p class="text-white text-sm">${activity.message}</p>
                            <p class="text-gray-400 text-xs">${activity.details}</p>
                            <span class="text-gray-500 text-xs">${activity.time.toLocaleDateString()}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        function updateStudentPerformanceChart(student) {
            const ctx = document.getElementById('studentPerformanceChart').getContext('2d');
            
            // Get marks by semester
            const myMarks = studentMarks.filter(m => m.studentId === student.studentId);
            const semesterData = {};
            
            myMarks.forEach(mark => {
                if (!semesterData[mark.semester]) {
                    semesterData[mark.semester] = {
                        totalMarks: 0,
                        count: 0
                    };
                }
                
                semesterData[mark.semester].totalMarks += mark.totalMarks;
                semesterData[mark.semester].count++;
            });
            
            const semesters = Object.keys(semesterData).sort();
            const averageMarks = semesters.map(sem => {
                const data = semesterData[sem];
                return data.count > 0 ? (data.totalMarks / data.count).toFixed(2) : 0;
            });
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: semesters.map(s => `Semester ${s}`),
                    datasets: [{
                        label: 'Average Performance',
                        data: averageMarks,
                        borderColor: 'rgba(147, 51, 234, 1)',
                        backgroundColor: 'rgba(147, 51, 234, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: 'rgba(147, 51, 234, 1)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        function updateStudentMarksSummary() {
            const student = students.find(s => s.username === currentUser.username);
            if (!student) return;
            
            const myMarks = studentMarks.filter(m => m.studentId === student.studentId);
            const totalSubjects = myMarks.length;
            const averageMarks = totalSubjects > 0 ? 
                (myMarks.reduce((sum, m) => sum + m.totalMarks, 0) / totalSubjects).toFixed(2) : 0;
            
            // Add marks summary to dashboard if not exists
            const dashboardContainer = document.getElementById('studentDashboard');
            let marksSummaryExists = dashboardContainer.querySelector('#studentMarksSummary');
            
            if (!marksSummaryExists) {
                const marksSummaryHTML = `
                    <div id="studentMarksSummary" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-book text-3xl mb-3 text-purple-300"></i>
                            <h3 class="text-2xl font-bold" id="studentTotalSubjects">0</h3>
                            <p class="text-gray-300">Subjects Completed</p>
                        </div>
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-chart-line text-3xl mb-3 text-orange-300"></i>
                            <h3 class="text-2xl font-bold" id="studentAverageMarks">0</h3>
                            <p class="text-gray-300">Average Marks</p>
                        </div>
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-trophy text-3xl mb-3 text-gold-300"></i>
                            <h3 class="text-2xl font-bold" id="studentGrade">-</h3>
                            <p class="text-gray-300">Current Grade</p>
                        </div>
                    </div>
                `;
                
                const chartContainer = dashboardContainer.querySelector('.glass-effect.rounded-xl.p-6');
                chartContainer.insertAdjacentHTML('beforebegin', marksSummaryHTML);
            }
            
            // Update marks summary
            document.getElementById('studentTotalSubjects').textContent = totalSubjects;
            document.getElementById('studentAverageMarks').textContent = averageMarks;
            
            // Calculate grade
            let grade = '-';
            if (averageMarks >= 90) grade = 'A+';
            else if (averageMarks >= 80) grade = 'A';
            else if (averageMarks >= 70) grade = 'B+';
            else if (averageMarks >= 60) grade = 'B';
            else if (averageMarks >= 50) grade = 'C';
            else if (averageMarks >= 40) grade = 'D';
            else if (averageMarks > 0) grade = 'F';
            
            document.getElementById('studentGrade').textContent = grade;
        }
        
        function updateStudentAttendanceChart() {
            const ctx = document.getElementById('studentAttendanceChart').getContext('2d');
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) return;
            
            // Get monthly attendance data for current year
            const currentYear = new Date().getFullYear();
            const monthlyData = [];
            
            for (let month = 1; month <= 12; month++) {
                const monthAttendance = attendance.filter(a => {
                    const attendanceDate = new Date(a.date);
                    return a.studentId === student.studentId &&
                           attendanceDate.getMonth() + 1 === month &&
                           attendanceDate.getFullYear() === currentYear;
                });
                
                const presentDays = monthAttendance.filter(a => a.status === 'present').length;
                const totalDays = monthAttendance.length;
                const percentage = totalDays > 0 ? (presentDays / totalDays) * 100 : 0;
                
                monthlyData.push(percentage);
            }
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [{
                        label: 'Attendance Percentage',
                        data: monthlyData,
                        borderColor: 'rgba(34, 197, 94, 1)',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        function loadStudentProfile() {
            if (currentUser.accountType !== 'student') return;
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) return;
            
            const profileHTML = `
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-white font-semibold mb-2">Full Name</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.fullName}
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Register Number</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.studentId}
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Email</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.email}
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Phone</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.phone || 'Not provided'}
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Department</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.department}
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Year</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.year} Year
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Semester</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.semester} Semester
                        </div>
                    </div>
                    <div>
                        <label class="block text-white font-semibold mb-2">Current GPA</label>
                        <div class="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30">
                            ${student.gpa.toFixed(2)}
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('studentProfile').innerHTML = profileHTML;
        }

        // Navigation
        function showSection(section) {
            document.querySelectorAll('.section').forEach(s => s.style.display = 'none');
            document.getElementById(section).style.display = 'block';
            currentSection = section;
            
            if (section === 'dashboard') {
                updateDashboard();
            } else if (section === 'viewStudents') {
                displayStudents();
            } else if (section === 'studentDashboard') {
                updateStudentDashboard();
            } else if (section === 'myAttendance') {
                loadStudentAttendance();
                // Set default year to current year
                document.getElementById('studentAttendanceYear').value = new Date().getFullYear();
            } else if (section === 'profile') {
                loadStudentProfile();
            } else if (section === 'reports') {
                generateReports();
                generateDetailedReports();
            } else if (section === 'attendanceRequests') {
                loadMyAttendanceRequests();
            } else if (section === 'attendanceRequestsAdmin') {
                loadAttendanceRequests();
            } else if (section === 'marksEntry') {
                loadSubjectsForMarks();
            } else if (section === 'viewMarks') {
                loadStudentMarks();
            } else if (section === 'marksManagement') {
                loadMarksManagement();
            }
            
            // Set today's date for attendance
            if (section === 'attendance') {
                document.getElementById('attendanceDate').value = new Date().toISOString().split('T')[0];
            }
        }

        // Form Validation and Submission
        document.getElementById('studentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = {
                id: Date.now(),
                fullName: document.getElementById('fullName').value.trim(),
                studentId: document.getElementById('studentId').value.trim(),
                email: document.getElementById('email').value.trim(),
                phone: document.getElementById('phone').value.trim(),
                department: document.getElementById('department').value,
                year: document.getElementById('year').value,
                gpa: parseFloat(document.getElementById('gpa').value) || 0,
                address: document.getElementById('address').value.trim(),
                dateAdded: new Date().toISOString()
            };

            // Validation
            if (!validateForm(formData)) return;

            // Check for duplicate student ID
            if (students.some(s => s.studentId === formData.studentId)) {
                showMessage('Student ID already exists!', 'error');
                return;
            }

            students.push(formData);
            localStorage.setItem('students', JSON.stringify(students));
            
            showMessage('Student added successfully!', 'success');
            document.getElementById('studentForm').reset();
            document.getElementById('aiPrediction').style.display = 'none';
            
            updateDashboard();
        });

        function validateForm(data) {
            // Full name validation
            if (!data.fullName || data.fullName.trim().length < 2) {
                showMessage('Please enter a valid full name (at least 2 characters)', 'error');
                return false;
            }
            
            if (!/^[a-zA-Z\s]+$/.test(data.fullName.trim())) {
                showMessage('Full name should contain only letters and spaces', 'error');
                return false;
            }
            
            // Student ID validation
            if (!data.studentId || data.studentId.trim().length < 3) {
                showMessage('Please enter a valid student ID (at least 3 characters)', 'error');
                return false;
            }
            
            // Email validation
            if (!data.email || !isValidEmail(data.email)) {
                showMessage('Please enter a valid email address', 'error');
                return false;
            }
            
            // Phone validation (if provided)
            if (data.phone && data.phone.trim()) {
                if (!/^[0-9]{10}$/.test(data.phone.trim())) {
                    showMessage('Please enter a valid 10-digit phone number', 'error');
                    return false;
                }
            }
            
            // Department validation
            if (!data.department) {
                showMessage('Please select a department', 'error');
                return false;
            }
            
            // Year validation
            if (!data.year) {
                showMessage('Please select a year', 'error');
                return false;
            }
            
            // GPA validation
            if (data.gpa < 0 || data.gpa > 4) {
                showMessage('GPA must be between 0 and 4', 'error');
                return false;
            }
            
            return true;
        }

        function isValidEmail(email) {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        }

        // AI Prediction (Mock ML)
        document.getElementById('gpa').addEventListener('input', function() {
            const gpa = parseFloat(this.value);
            const department = document.getElementById('department').value;
            
            if (gpa && department) {
                generatePerformancePrediction(gpa, department);
            }
        });

        function generatePerformancePrediction(gpa, department) {
            const predictionDiv = document.getElementById('aiPrediction');
            const predictionText = document.getElementById('predictionText');
            
            let prediction = '';
            let riskLevel = '';
            
            // Simple ML-like logic for predictions
            if (gpa >= 3.5) {
                prediction = 'Excellent performance predicted. High probability of academic success and leadership opportunities.';
                riskLevel = 'Low Risk';
            } else if (gpa >= 3.0) {
                prediction = 'Good performance expected. Consider additional support in challenging subjects.';
                riskLevel = 'Medium Risk';
            } else if (gpa >= 2.5) {
                prediction = 'Academic support recommended. Early intervention could improve outcomes significantly.';
                riskLevel = 'High Risk';
            } else {
                prediction = 'Intensive academic support strongly recommended. Consider tutoring and counseling services.';
                riskLevel = 'Critical Risk';
    }
            
            predictionText.innerHTML = `
                <strong>Risk Level:</strong> ${riskLevel}<br>
                <strong>Prediction:</strong> ${prediction}
            `;
            
            predictionDiv.style.display = 'block';
        }

        // Dashboard Updates
        function updateDashboard() {
            // Update basic stats
            document.getElementById('totalStudents').textContent = students.length;
            
            const avgGrade = students.length > 0 ? 
                (students.reduce((sum, s) => sum + s.gpa, 0) / students.length).toFixed(2) : '0.00';
            document.getElementById('avgGrade').textContent = avgGrade;
            
            const topPerformers = students.filter(s => s.gpa >= 3.5).length;
            document.getElementById('topPerformers').textContent = topPerformers;
            
            // Update attendance statistics
            updateAttendanceStats();
            
            // Update charts
            updateCharts();
            
            // Update recent activities
            updateRecentActivities();
        }
        
        function updateAttendanceStats() {
            const today = new Date().toISOString().split('T')[0];
            const thisMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format
            
            // Today's attendance
            const todayAttendance = attendance.filter(a => a.date === today);
            const todayPresent = todayAttendance.filter(a => a.status === 'present').length;
            const todayTotal = todayAttendance.length;
            const todayPercentage = todayTotal > 0 ? ((todayPresent / todayTotal) * 100).toFixed(1) : 0;
            
            // This month's attendance
            const monthAttendance = attendance.filter(a => a.date.startsWith(thisMonth));
            const monthPresent = monthAttendance.filter(a => a.status === 'present').length;
            const monthTotal = monthAttendance.length;
            const monthPercentage = monthTotal > 0 ? ((monthPresent / monthTotal) * 100).toFixed(1) : 0;
            
            // Add attendance stats to dashboard if not exists
            const dashboardContainer = document.getElementById('dashboard');
            let attendanceStatsExists = dashboardContainer.querySelector('#attendanceStats');
            
            if (!attendanceStatsExists) {
                const attendanceStatsHTML = `
                    <div id="attendanceStats" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-calendar-day text-3xl mb-3 text-green-300"></i>
                            <h3 class="text-2xl font-bold" id="todayAttendance">0%</h3>
                            <p class="text-gray-300">Today's Attendance</p>
                        </div>
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-calendar-alt text-3xl mb-3 text-blue-300"></i>
                            <h3 class="text-2xl font-bold" id="monthAttendance">0%</h3>
                            <p class="text-gray-300">This Month</p>
                        </div>
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-exclamation-triangle text-3xl mb-3 text-red-300"></i>
                            <h3 class="text-2xl font-bold" id="lowAttendanceCount">0</h3>
                            <p class="text-gray-300">Low Attendance</p>
                        </div>
                        <div class="glass-effect rounded-xl p-6 text-white text-center">
                            <i class="fas fa-clipboard-list text-3xl mb-3 text-orange-300"></i>
                            <h3 class="text-2xl font-bold" id="pendingRequests">0</h3>
                            <p class="text-gray-300">Pending Requests</p>
                        </div>
                    </div>
                `;
                
                const existingStats = dashboardContainer.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
                existingStats.insertAdjacentHTML('afterend', attendanceStatsHTML);
            }
            
            // Update attendance stats
            document.getElementById('todayAttendance').textContent = todayPercentage + '%';
            document.getElementById('monthAttendance').textContent = monthPercentage + '%';
            
            // Calculate low attendance students (below 75%)
            const lowAttendanceStudents = students.filter(student => {
                const studentAttendance = attendance.filter(a => a.studentId === student.studentId);
                const presentCount = studentAttendance.filter(a => a.status === 'present').length;
                const totalCount = studentAttendance.length;
                const percentage = totalCount > 0 ? (presentCount / totalCount) * 100 : 100;
                return percentage < 75 && totalCount > 0;
            });
            
            document.getElementById('lowAttendanceCount').textContent = lowAttendanceStudents.length;
            
            // Pending attendance requests
            const pendingRequests = attendanceRequests.filter(r => r.status === 'pending').length;
            document.getElementById('pendingRequests').textContent = pendingRequests;
        }
        
        function updateRecentActivities() {
            const dashboardContainer = document.getElementById('dashboard');
            let activitiesExists = dashboardContainer.querySelector('#recentActivities');
            
            if (!activitiesExists) {
                const activitiesHTML = `
                    <div id="recentActivities" class="glass-effect rounded-xl p-6 mt-6">
                        <h3 class="text-white text-xl font-bold mb-4">
                            <i class="fas fa-clock mr-2"></i>Recent Activities
                        </h3>
                        <div id="activitiesList" class="space-y-3">
                            <!-- Activities will be populated here -->
                        </div>
                    </div>
                `;
                
                const chartsContainer = dashboardContainer.querySelector('.grid.grid-cols-1.lg\\:grid-cols-2');
                chartsContainer.insertAdjacentHTML('afterend', activitiesHTML);
            }
            
            // Get recent activities
            const recentActivities = [];
            
            // Recent attendance requests
            const recentRequests = attendanceRequests
                .sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt))
                .slice(0, 3);
            
            recentRequests.forEach(req => {
                recentActivities.push({
                    type: 'request',
                    message: `${req.studentName} requested attendance update for ${req.date}`,
                    time: req.submittedAt,
                    status: req.status
                });
            });
            
            // Recent marks entries
            const recentMarks = studentMarks
                .sort((a, b) => new Date(b.enteredAt) - new Date(a.enteredAt))
                .slice(0, 3);
            
            recentMarks.forEach(mark => {
                recentActivities.push({
                    type: 'marks',
                    message: `${mark.studentName} entered marks for ${mark.subject}`,
                    time: mark.enteredAt,
                    status: 'completed'
                });
            });
            
            // Recent student additions
            const recentStudents = students
                .sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded))
                .slice(0, 2);
            
            recentStudents.forEach(student => {
                recentActivities.push({
                    type: 'student',
                    message: `New student ${student.fullName} added to ${student.department}`,
                    time: student.dateAdded,
                    status: 'completed'
                });
            });
            
            // Sort all activities by time
            recentActivities.sort((a, b) => new Date(b.time) - new Date(a.time));
            
            const activitiesList = document.getElementById('activitiesList');
            
            if (recentActivities.length === 0) {
                activitiesList.innerHTML = '<p class="text-gray-400 text-center">No recent activities</p>';
                return;
            }
            
            activitiesList.innerHTML = recentActivities.slice(0, 5).map(activity => {
                const statusColor = {
                    'pending': 'text-yellow-400',
                    'approved': 'text-green-400',
                    'rejected': 'text-red-400',
                    'completed': 'text-blue-400'
                }[activity.status];
                
                const icon = {
                    'request': 'fas fa-edit',
                    'marks': 'fas fa-graduation-cap',
                    'student': 'fas fa-user-plus'
                }[activity.type];
                
                return `
                    <div class="flex items-center space-x-3 p-3 bg-white/5 rounded-lg">
                        <i class="${icon} ${statusColor}"></i>
                        <div class="flex-1">
                            <p class="text-white text-sm">${activity.message}</p>
                            <p class="text-gray-400 text-xs">${new Date(activity.time).toLocaleString()}</p>
                        </div>
                        <span class="px-2 py-1 rounded text-xs ${statusColor} bg-white/10">
                            ${activity.status}
                        </span>
                    </div>
                `;
            }).join('');
        }

        function updateCharts() {
            updateGradeChart();
            updateDepartmentChart();
        }

        function updateGradeChart() {
            const ctx = document.getElementById('gradeChart').getContext('2d');
            
            const gradeRanges = {
                'A (3.5-4.0)': students.filter(s => s.gpa >= 3.5).length,
                'B (3.0-3.4)': students.filter(s => s.gpa >= 3.0 && s.gpa < 3.5).length,
                'C (2.5-2.9)': students.filter(s => s.gpa >= 2.5 && s.gpa < 3.0).length,
                'D (2.0-2.4)': students.filter(s => s.gpa >= 2.0 && s.gpa < 2.5).length,
                'F (0-1.9)': students.filter(s => s.gpa < 2.0).length
            };

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(gradeRanges),
                    datasets: [{
                        label: 'Number of Students',
                        data: Object.values(gradeRanges),
                        backgroundColor: [
                            'rgba(34, 197, 94, 0.8)',
                            'rgba(59, 130, 246, 0.8)',
                            'rgba(251, 191, 36, 0.8)',
                            'rgba(249, 115, 22, 0.8)',
                            'rgba(239, 68, 68, 0.8)'
                        ],
                        borderColor: [
                            'rgba(34, 197, 94, 1)',
                            'rgba(59, 130, 246, 1)',
                            'rgba(251, 191, 36, 1)',
                            'rgba(249, 115, 22, 1)',
                            'rgba(239, 68, 68, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        function updateDepartmentChart() {
            const ctx = document.getElementById('departmentChart').getContext('2d');
            
            const departments = {};
            students.forEach(student => {
                departments[student.department] = (departments[student.department] || 0) + 1;
            });

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(departments),
                    datasets: [{
                        data: Object.values(departments),
                        backgroundColor: [
                            'rgba(139, 69, 19, 0.8)',
                            'rgba(75, 0, 130, 0.8)',
                            'rgba(255, 20, 147, 0.8)',
                            'rgba(0, 191, 255, 0.8)',
                            'rgba(50, 205, 50, 0.8)'
                        ],
                        borderColor: [
                            'rgba(139, 69, 19, 1)',
                            'rgba(75, 0, 130, 1)',
                            'rgba(255, 20, 147, 1)',
                            'rgba(0, 191, 255, 1)',
                            'rgba(50, 205, 50, 1)'
                        ],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    }
                }
            });
        }

        // Display Students
        function displayStudents() {
            const tbody = document.getElementById('studentsTable');
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filterDept = document.getElementById('filterDepartment').value;
            
            let filteredStudents = students.filter(student => {
                const matchesSearch = student.fullName.toLowerCase().includes(searchTerm) ||
                                    student.studentId.toLowerCase().includes(searchTerm) ||
                                    student.email.toLowerCase().includes(searchTerm);
                const matchesDept = !filterDept || student.department === filterDept;
                return matchesSearch && matchesDept;
            });

            tbody.innerHTML = filteredStudents.map(student => `
                <tr class="border-b border-white/20 hover:bg-white/10 transition-colors">
                    <td class="p-3">${student.fullName}</td>
                    <td class="p-3">${student.studentId}</td>
                    <td class="p-3">${student.department}</td>
                    <td class="p-3">${student.year}</td>
                    <td class="p-3">
                        <span class="px-2 py-1 rounded-full text-sm ${getGradeColor(student.gpa)}">
                            ${student.gpa.toFixed(2)}
                        </span>
                    </td>
                    <td class="p-3">
                        <button onclick="editStudent(${student.id})" class="bg-blue-600 text-white px-3 py-1 rounded mr-2 hover:bg-blue-700 transition-colors">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteStudent(${student.id})" class="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition-colors">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function getGradeColor(gpa) {
            if (gpa >= 3.5) return 'bg-green-600';
            if (gpa >= 3.0) return 'bg-blue-600';
            if (gpa >= 2.5) return 'bg-yellow-600';
            if (gpa >= 2.0) return 'bg-orange-600';
            return 'bg-red-600';
        }

        // Search and Filter
        document.getElementById('searchInput').addEventListener('input', displayStudents);
        document.getElementById('filterDepartment').addEventListener('change', displayStudents);

        // Student Actions
        function editStudent(id) {
            const student = students.find(s => s.id === id);
            if (student) {
                // Populate form with student data
                document.getElementById('fullName').value = student.fullName;
                document.getElementById('studentId').value = student.studentId;
                document.getElementById('email').value = student.email;
                document.getElementById('phone').value = student.phone;
                document.getElementById('department').value = student.department;
                document.getElementById('year').value = student.year;
                document.getElementById('gpa').value = student.gpa;
                document.getElementById('address').value = student.address;
                
                // Remove student from array (will be re-added when form is submitted)
                students = students.filter(s => s.id !== id);
                localStorage.setItem('students', JSON.stringify(students));
                
                showSection('addStudent');
                showMessage('Student loaded for editing', 'info');
            }
        }

        function deleteStudent(id) {
            if (confirm('Are you sure you want to delete this student?')) {
                students = students.filter(s => s.id !== id);
                localStorage.setItem('students', JSON.stringify(students));
                displayStudents();
                updateDashboard();
                showMessage('Student deleted successfully', 'success');
            }
        }

        // AI Insights
        function generateAIInsights() {
            generatePerformancePredictions();
            generateSmartRecommendations();
            updateMLAnalyticsChart();
        }

        function generatePerformancePredictions() {
            const container = document.getElementById('performancePredictions');
            
            const predictions = [
                {
                    title: 'At-Risk Students',
                    count: students.filter(s => s.gpa < 2.5).length,
                    description: 'Students who may need additional academic support',
                    color: 'bg-red-600'
                },
                {
                    title: 'High Achievers',
                    count: students.filter(s => s.gpa >= 3.5).length,
                    description: 'Students likely to excel in advanced programs',
                    color: 'bg-green-600'
                },
                {
                    title: 'Improvement Potential',
                    count: students.filter(s => s.gpa >= 2.5 && s.gpa < 3.0).length,
                    description: 'Students with strong potential for grade improvement',
                    color: 'bg-yellow-600'
                }
            ];

            container.innerHTML = predictions.map(pred => `
                <div class="bg-white/10 rounded-lg p-4 border border-white/20">
                    <div class="flex items-center justify-between mb-2">
                        <h4 class="text-white font-semibold">${pred.title}</h4>
                        <span class="${pred.color} text-white px-3 py-1 rounded-full text-sm font-bold">
                            ${pred.count}
                        </span>
                    </div>
                    <p class="text-gray-300 text-sm">${pred.description}</p>
                </div>
            `).join('');
        }

        function generateSmartRecommendations() {
            const container = document.getElementById('smartRecommendations');
            
            const recommendations = [
                {
                    icon: 'fas fa-user-graduate',
                    title: 'Tutoring Program',
                    description: 'Recommend peer tutoring for students with GPA below 2.5'
                },
                {
                    icon: 'fas fa-trophy',
                    title: 'Honor Roll',
                    description: 'Recognize students with GPA above 3.5 in honor programs'
                },
                {
                    icon: 'fas fa-chart-line',
                    title: 'Progress Tracking',
                    description: 'Implement weekly check-ins for at-risk students'
                },
                {
                    icon: 'fas fa-users',
                    title: 'Study Groups',
                    description: 'Form department-based study groups for collaborative learning'
                }
            ];

            container.innerHTML = recommendations.map(rec => `
                <div class="bg-white/10 rounded-lg p-4 border border-white/20">
                    <div class="flex items-start space-x-3">
                        <i class="${rec.icon} text-blue-400 text-xl mt-1"></i>
                        <div>
                            <h4 class="text-white font-semibold mb-1">${rec.title}</h4>
                            <p class="text-gray-300 text-sm">${rec.description}</p>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateMLAnalyticsChart() {
            const ctx = document.getElementById('mlAnalyticsChart').getContext('2d');
            
            // Generate trend data (mock ML analytics)
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
            const avgGPAData = [3.2, 3.3, 3.1, 3.4, 3.5, 3.6];
            const enrollmentData = [120, 135, 128, 142, 156, 163];

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Average GPA Trend',
                        data: avgGPAData,
                        borderColor: 'rgba(59, 130, 246, 1)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y'
                    }, {
                        label: 'Enrollment Numbers',
                        data: enrollmentData,
                        borderColor: 'rgba(34, 197, 94, 1)',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                drawOnChartArea: false,
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        // Message System
        function showMessage(message, type) {
            const container = document.getElementById('messageContainer');
            const messageDiv = document.createElement('div');
            
            const colors = {
                success: 'bg-green-600',
                error: 'bg-red-600',
                info: 'bg-blue-600'
            };
            
            messageDiv.className = `${colors[type]} text-white px-6 py-3 rounded-lg mb-4 shadow-lg slide-in`;
            messageDiv.innerHTML = `
                <div class="flex items-center justify-between">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            container.appendChild(messageDiv);
            
            setTimeout(() => {
                if (messageDiv.parentElement) {
                    messageDiv.remove();
                }
            }, 5000);
        }

        // Reports Functions
        function generateReports() {
            generateDepartmentAttendanceChart();
            generateMonthlyAttendanceChart();
            generateLowAttendanceAlerts();
        }
        
        function generateDepartmentAttendanceChart() {
            const ctx = document.getElementById('departmentAttendanceChart').getContext('2d');
            
            const departments = ['ADFD', 'CSE', 'EC', 'COMPUTER SCIENCE AND ENGINEERING', 
                               'ELECTRICAL AND ELECTRONICS ENGINEERING', 'ELECTRICAL ENGINEERING', 
                               'CIVIL ENGINEERING', 'MECHANICAL ENGINEERING'];
            
            const departmentData = departments.map(dept => {
                const deptAttendance = attendance.filter(a => a.department === dept);
                const presentCount = deptAttendance.filter(a => a.status === 'present').length;
                const totalCount = deptAttendance.length;
                return totalCount > 0 ? (presentCount / totalCount) * 100 : 0;
            });
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: departments,
                    datasets: [{
                        data: departmentData,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.8)',
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(255, 205, 86, 0.8)',
                            'rgba(75, 192, 192, 0.8)',
                            'rgba(153, 102, 255, 0.8)',
                            'rgba(255, 159, 64, 0.8)',
                            'rgba(199, 199, 199, 0.8)',
                            'rgba(83, 102, 255, 0.8)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    }
                }
            });
        }
        
        function generateMonthlyAttendanceChart() {
            const ctx = document.getElementById('monthlyAttendanceChart').getContext('2d');
            
            const currentYear = new Date().getFullYear();
            const monthlyData = [];
            
            for (let month = 1; month <= 12; month++) {
                const monthAttendance = attendance.filter(a => {
                    const attendanceDate = new Date(a.date);
                    return attendanceDate.getMonth() + 1 === month &&
                           attendanceDate.getFullYear() === currentYear;
                });
                
                const presentCount = monthAttendance.filter(a => a.status === 'present').length;
                const totalCount = monthAttendance.length;
                const percentage = totalCount > 0 ? (presentCount / totalCount) * 100 : 0;
                
                monthlyData.push(percentage);
            }
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [{
                        label: 'Average Attendance %',
                        data: monthlyData,
                        backgroundColor: 'rgba(34, 197, 94, 0.8)',
                        borderColor: 'rgba(34, 197, 94, 1)',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        function generateLowAttendanceAlerts() {
            const container = document.getElementById('lowAttendanceAlerts');
            
            // Calculate attendance percentage for each student
            const studentAttendanceMap = {};
            
            students.forEach(student => {
                const studentAttendanceRecords = attendance.filter(a => a.studentId === student.studentId);
                const presentCount = studentAttendanceRecords.filter(a => a.status === 'present').length;
                const totalCount = studentAttendanceRecords.length;
                const percentage = totalCount > 0 ? (presentCount / totalCount) * 100 : 0;
                
                if (percentage < 75 && totalCount > 0) { // Alert for attendance below 75%
                    studentAttendanceMap[student.studentId] = {
                        student: student,
                        percentage: percentage,
                        totalDays: totalCount,
                        presentDays: presentCount
                    };
                }
            });
            
            const lowAttendanceStudents = Object.values(studentAttendanceMap);
            
            if (lowAttendanceStudents.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No students with low attendance found.</p>';
                return;
            }
            
            container.innerHTML = lowAttendanceStudents.map(data => `
                <div class="bg-red-600/20 border border-red-400 rounded-lg p-4">
                    <div class="flex items-center justify-between">
                        <div>
                            <h4 class="text-white font-semibold">${data.student.fullName}</h4>
                            <p class="text-red-200 text-sm">${data.student.studentId} - ${data.student.department}</p>
                            <p class="text-red-300 text-xs">Year ${data.student.year}, Semester ${data.student.semester}</p>
                        </div>
                        <div class="text-right">
                            <div class="text-red-400 font-bold text-lg">${data.percentage.toFixed(1)}%</div>
                            <div class="text-red-300 text-sm">${data.presentDays}/${data.totalDays} days</div>
                            <button onclick="sendAttendanceAlert('${data.student.studentId}')" class="bg-red-600 text-white px-2 py-1 rounded text-xs mt-1 hover:bg-red-700">
                                <i class="fas fa-bell mr-1"></i>Alert
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        function sendAttendanceAlert(studentId) {
            const student = students.find(s => s.studentId === studentId);
            if (!student) return;
            
            // In a real application, this would send an email/SMS
            showMessage(`Attendance alert sent to ${student.fullName}`, 'success');
        }
        
        // Enhanced Reports Functions
        function generateDetailedReports() {
            const reportsContainer = document.getElementById('reports');
            
            // Add detailed reports section if not exists
            let detailedReportsExists = reportsContainer.querySelector('#detailedReports');
            
            if (!detailedReportsExists) {
                const detailedReportsHTML = `
                    <div id="detailedReports" class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                        <div class="glass-effect rounded-xl p-6">
                            <h3 class="text-white text-xl font-bold mb-4">
                                <i class="fas fa-chart-line mr-2"></i>Performance Analytics
                            </h3>
                            <canvas id="performanceChart"></canvas>
                        </div>
                        <div class="glass-effect rounded-xl p-6">
                            <h3 class="text-white text-xl font-bold mb-4">
                                <i class="fas fa-users mr-2"></i>Department Statistics
                            </h3>
                            <div id="departmentStats" class="space-y-4">
                                <!-- Department stats will be populated here -->
                            </div>
                        </div>
                    </div>
                    
                    <div class="glass-effect rounded-xl p-6 mt-6">
                        <h3 class="text-white text-xl font-bold mb-4">
                            <i class="fas fa-download mr-2"></i>Export Reports
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <button onclick="exportAttendanceReport()" class="bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                                <i class="fas fa-calendar-check mr-2"></i>Export Attendance
                            </button>
                            <button onclick="exportMarksReport()" class="bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors">
                                <i class="fas fa-graduation-cap mr-2"></i>Export Marks
                            </button>
                            <button onclick="exportStudentReport()" class="bg-purple-600 text-white px-4 py-3 rounded-lg hover:bg-purple-700 transition-colors">
                                <i class="fas fa-users mr-2"></i>Export Students
                            </button>
                        </div>
                    </div>
                `;
                
                const lowAttendanceContainer = reportsContainer.querySelector('#lowAttendanceAlerts').parentElement;
                lowAttendanceContainer.insertAdjacentHTML('afterend', detailedReportsHTML);
            }
            
            generatePerformanceChart();
            generateDepartmentStats();
        }
        
        function generatePerformanceChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            
            // Calculate performance data by semester
            const semesterData = {};
            
            studentMarks.forEach(mark => {
                if (!semesterData[mark.semester]) {
                    semesterData[mark.semester] = {
                        totalMarks: 0,
                        count: 0,
                        students: new Set()
                    };
                }
                
                semesterData[mark.semester].totalMarks += mark.totalMarks;
                semesterData[mark.semester].count++;
                semesterData[mark.semester].students.add(mark.studentId);
            });
            
            const semesters = Object.keys(semesterData).sort();
            const averageMarks = semesters.map(sem => {
                const data = semesterData[sem];
                return data.count > 0 ? (data.totalMarks / data.count).toFixed(2) : 0;
            });
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: semesters.map(s => `Semester ${s}`),
                    datasets: [{
                        label: 'Average Performance',
                        data: averageMarks,
                        borderColor: 'rgba(59, 130, 246, 1)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }
        
        function generateDepartmentStats() {
            const container = document.getElementById('departmentStats');
            
            const departments = ['ADFD', 'CSE', 'EC', 'COMPUTER SCIENCE AND ENGINEERING', 
                               'ELECTRICAL AND ELECTRONICS ENGINEERING', 'ELECTRICAL ENGINEERING', 
                               'CIVIL ENGINEERING', 'MECHANICAL ENGINEERING'];
            
            const departmentData = departments.map(dept => {
                const deptStudents = students.filter(s => s.department === dept);
                const deptAttendance = attendance.filter(a => a.department === dept);
                const deptMarks = studentMarks.filter(m => m.department === dept);
                
                const presentCount = deptAttendance.filter(a => a.status === 'present').length;
                const totalAttendance = deptAttendance.length;
                const attendancePercentage = totalAttendance > 0 ? ((presentCount / totalAttendance) * 100).toFixed(1) : 0;
                
                const totalMarks = deptMarks.reduce((sum, m) => sum + m.totalMarks, 0);
                const averageMarks = deptMarks.length > 0 ? (totalMarks / deptMarks.length).toFixed(2) : 0;
                
                return {
                    department: dept,
                    studentCount: deptStudents.length,
                    attendancePercentage: attendancePercentage,
                    averageMarks: averageMarks
                };
            }).filter(data => data.studentCount > 0);
            
            container.innerHTML = departmentData.map(data => `
                <div class="bg-white/10 rounded-lg p-4">
                    <h4 class="text-white font-semibold mb-2">${data.department}</h4>
                    <div class="grid grid-cols-3 gap-4 text-sm">
                        <div>
                            <p class="text-blue-300 font-semibold">${data.studentCount}</p>
                            <p class="text-gray-400">Students</p>
                        </div>
                        <div>
                            <p class="text-green-300 font-semibold">${data.attendancePercentage}%</p>
                            <p class="text-gray-400">Attendance</p>
                        </div>
                        <div>
                            <p class="text-yellow-300 font-semibold">${data.averageMarks}</p>
                            <p class="text-gray-400">Avg Marks</p>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Export Functions
        function exportAttendanceReport() {
            const csvContent = generateAttendanceCSV();
            downloadCSV(csvContent, 'attendance_report.csv');
            showMessage('Attendance report exported successfully!', 'success');
        }
        
        function exportMarksReport() {
            const csvContent = generateMarksCSV();
            downloadCSV(csvContent, 'marks_report.csv');
            showMessage('Marks report exported successfully!', 'success');
        }
        
        function exportStudentReport() {
            const csvContent = generateStudentCSV();
            downloadCSV(csvContent, 'student_report.csv');
            showMessage('Student report exported successfully!', 'success');
        }
        
        function generateAttendanceCSV() {
            let csv = 'Student Name,Register Number,Department,Year,Date,Status,Marked By\n';
            
            attendance.forEach(record => {
                csv += `"${record.studentName}","${record.studentId}","${record.department}","${record.year}","${record.date}","${record.status}","${record.markedBy}"\n`;
            });
            
            return csv;
        }
        
        function generateMarksCSV() {
            let csv = 'Student Name,Register Number,Department,Semester,Subject,Internal Avg,Skill Test Avg,Final Exam,Total Marks\n';
            
            studentMarks.forEach(mark => {
                csv += `"${mark.studentName}","${mark.studentId}","${mark.department}","${mark.semester}","${mark.subject}","${mark.internalsAverage.toFixed(2)}","${mark.skillTestsAverage.toFixed(2)}","${mark.finalExam}","${mark.totalMarks.toFixed(2)}"\n`;
            });
            
            return csv;
        }
        
        function generateStudentCSV() {
            let csv = 'Full Name,Register Number,Email,Phone,Department,Year,Semester,GPA\n';
            
            students.forEach(student => {
                csv += `"${student.fullName}","${student.studentId}","${student.email}","${student.phone || ''}","${student.department}","${student.year}","${student.semester}","${student.gpa.toFixed(2)}"\n`;
            });
            
            return csv;
        }
        
        function downloadCSV(csvContent, filename) {
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // Attendance Request Functions
        function submitAttendanceRequest() {
            const date = document.getElementById('requestDate').value;
            const currentStatus = document.getElementById('currentStatus').value;
            const requestedStatus = document.getElementById('requestedStatus').value;
            const reason = document.getElementById('requestReason').value.trim();
            
            if (!date || !currentStatus || !requestedStatus || !reason) {
                showMessage('Please fill all fields', 'error');
                return;
            }
            
            if (currentStatus === requestedStatus) {
                showMessage('Current status and requested status cannot be the same', 'error');
                return;
            }
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            const request = {
                id: Date.now(),
                studentId: student.studentId,
                studentName: student.fullName,
                department: student.department,
                year: student.year,
                semester: student.semester,
                date: date,
                currentStatus: currentStatus,
                requestedStatus: requestedStatus,
                reason: reason,
                status: 'pending',
                submittedAt: new Date().toISOString(),
                processedAt: null,
                processedBy: null,
                adminComments: ''
            };
            
            attendanceRequests.push(request);
            localStorage.setItem('attendanceRequests', JSON.stringify(attendanceRequests));
            
            showMessage('Attendance request submitted successfully!', 'success');
            
            // Clear form
            document.getElementById('requestDate').value = '';
            document.getElementById('currentStatus').value = '';
            document.getElementById('requestedStatus').value = '';
            document.getElementById('requestReason').value = '';
            
            loadMyAttendanceRequests();
        }
        
        function loadMyAttendanceRequests() {
            if (currentUser.accountType !== 'student') return;
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) return;
            
            const myRequests = attendanceRequests.filter(r => r.studentId === student.studentId);
            const container = document.getElementById('myAttendanceRequests');
            
            if (myRequests.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No attendance requests found.</p>';
                return;
            }
            
            container.innerHTML = myRequests.map(request => {
                const statusColor = {
                    'pending': 'bg-yellow-600',
                    'approved': 'bg-green-600',
                    'rejected': 'bg-red-600'
                }[request.status];
                
                return `
                    <div class="bg-white/10 rounded-lg p-4 border border-white/20">
                        <div class="flex justify-between items-start mb-2">
                            <div>
                                <h4 class="text-white font-semibold">Date: ${request.date}</h4>
                                <p class="text-gray-300 text-sm">${request.currentStatus} → ${request.requestedStatus}</p>
                            </div>
                            <span class="${statusColor} text-white px-3 py-1 rounded-full text-sm font-bold">
                                ${request.status.toUpperCase()}
                            </span>
                        </div>
                        <p class="text-gray-300 text-sm mb-2"><strong>Reason:</strong> ${request.reason}</p>
                        <p class="text-gray-400 text-xs">Submitted: ${new Date(request.submittedAt).toLocaleString()}</p>
                        ${request.adminComments ? `<p class="text-blue-300 text-sm mt-2"><strong>Admin Comments:</strong> ${request.adminComments}</p>` : ''}
                    </div>
                `;
            }).join('');
        }
        
        function loadAttendanceRequests() {
            const statusFilter = document.getElementById('requestStatusFilter').value;
            const departmentFilter = document.getElementById('requestDepartmentFilter').value;
            
            let filteredRequests = attendanceRequests.filter(request => {
                let matches = true;
                if (statusFilter) matches = matches && request.status === statusFilter;
                if (departmentFilter) matches = matches && request.department === departmentFilter;
                return matches;
            });
            
            const container = document.getElementById('attendanceRequestsList');
            
            if (filteredRequests.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No attendance requests found.</p>';
                return;
            }
            
            container.innerHTML = filteredRequests.map(request => {
                const statusColor = {
                    'pending': 'bg-yellow-600',
                    'approved': 'bg-green-600',
                    'rejected': 'bg-red-600'
                }[request.status];
                
                return `
                    <div class="bg-white/10 rounded-lg p-4 border border-white/20">
                        <div class="flex justify-between items-start mb-4">
                            <div>
                                <h4 class="text-white font-semibold">${request.studentName}</h4>
                                <p class="text-gray-300 text-sm">${request.studentId} - ${request.department}</p>
                                <p class="text-gray-400 text-xs">Year ${request.year}, Semester ${request.semester}</p>
                            </div>
                            <span class="${statusColor} text-white px-3 py-1 rounded-full text-sm font-bold">
                                ${request.status.toUpperCase()}
                            </span>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <p class="text-white"><strong>Date:</strong> ${request.date}</p>
                                <p class="text-white"><strong>Change:</strong> ${request.currentStatus} → ${request.requestedStatus}</p>
                            </div>
                            <div>
                                <p class="text-gray-300 text-sm"><strong>Submitted:</strong> ${new Date(request.submittedAt).toLocaleString()}</p>
                                ${request.processedAt ? `<p class="text-gray-300 text-sm"><strong>Processed:</strong> ${new Date(request.processedAt).toLocaleString()}</p>` : ''}
                            </div>
                        </div>
                        
                        <p class="text-gray-300 text-sm mb-4"><strong>Reason:</strong> ${request.reason}</p>
                        
                        ${request.status === 'pending' ? `
                            <div class="flex flex-wrap gap-2">
                                <button onclick="processAttendanceRequest(${request.id}, 'under_review')" class="bg-yellow-600 text-white px-3 py-2 rounded hover:bg-yellow-700 transition-colors text-sm">
                                    <i class="fas fa-eye mr-1"></i>Review
                                </button>
                                <button onclick="processAttendanceRequest(${request.id}, 'approved')" class="bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700 transition-colors text-sm">
                                    <i class="fas fa-check mr-1"></i>Approve
                                </button>
                                <button onclick="processAttendanceRequest(${request.id}, 'rejected')" class="bg-red-600 text-white px-3 py-2 rounded hover:bg-red-700 transition-colors text-sm">
                                    <i class="fas fa-times mr-1"></i>Reject
                                </button>
                            </div>
                        ` : request.status === 'under_review' ? `
                            <div class="flex flex-wrap gap-2">
                                <button onclick="processAttendanceRequest(${request.id}, 'approved')" class="bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700 transition-colors text-sm">
                                    <i class="fas fa-check mr-1"></i>Approve
                                </button>
                                <button onclick="processAttendanceRequest(${request.id}, 'rejected')" class="bg-red-600 text-white px-3 py-2 rounded hover:bg-red-700 transition-colors text-sm">
                                    <i class="fas fa-times mr-1"></i>Reject
                                </button>
                                <button onclick="processAttendanceRequest(${request.id}, 'reverted')" class="bg-gray-600 text-white px-3 py-2 rounded hover:bg-gray-700 transition-colors text-sm">
                                    <i class="fas fa-undo mr-1"></i>Revert
                                </button>
                            </div>
                        ` : request.status === 'approved' || request.status === 'rejected' ? `
                            <div class="flex flex-wrap gap-2">
                                <button onclick="processAttendanceRequest(${request.id}, 'reverted')" class="bg-gray-600 text-white px-3 py-2 rounded hover:bg-gray-700 transition-colors text-sm">
                                    <i class="fas fa-undo mr-1"></i>Revert to Pending
                                </button>
                            </div>
                        ` : ''}
                        
                        ${request.adminComments ? `<p class="text-blue-300 text-sm mt-2"><strong>Admin Comments:</strong> ${request.adminComments}</p>` : ''}
                    </div>
                `;
            }).join('');
        }
        
        function processAttendanceRequest(requestId, action) {
            const request = attendanceRequests.find(r => r.id === requestId);
            if (!request) return;
            
            let actionText = '';
            let promptText = '';
            
            switch(action) {
                case 'under_review':
                    actionText = 'Mark as Under Review';
                    promptText = 'Mark this request as under review. Add review comments:';
                    break;
                case 'approved':
                    actionText = 'Approve';
                    promptText = 'Approve this request. Add approval comments (optional):';
                    break;
                case 'rejected':
                    actionText = 'Reject';
                    promptText = 'Reject this request. Please provide reason for rejection:';
                    break;
                case 'reverted':
                    actionText = 'Revert';
                    promptText = 'Revert this request back to pending. Add revert reason:';
                    break;
            }
            
            const comments = prompt(promptText);
            if (comments === null) return; // User cancelled
            
            if (action === 'rejected' && !comments.trim()) {
                showMessage('Rejection reason is required', 'error');
                return;
            }
            
            // Update request status
            request.status = action;
            request.processedAt = new Date().toISOString();
            request.processedBy = currentUser.username;
            request.adminComments = comments || '';
            
            // If reverted, clear processed info
            if (action === 'reverted') {
                request.status = 'pending';
                request.processedAt = null;
                request.processedBy = null;
            }
            
            // If approved, update the actual attendance record
            if (action === 'approved') {
                // Remove existing attendance for this date and student
                attendance = attendance.filter(a => 
                    !(a.studentId === request.studentId && a.date === request.date)
                );
                
                // Add new attendance record with requested status
                attendance.push({
                    id: Date.now() + Math.random(),
                    studentId: request.studentId,
                    studentName: request.studentName,
                    department: request.department,
                    year: request.year,
                    semester: request.semester,
                    date: request.date,
                    status: request.requestedStatus,
                    markedBy: currentUser.username,
                    timestamp: new Date().toISOString(),
                    updatedFromRequest: true,
                    originalRequestId: requestId
                });
                
                localStorage.setItem('attendance', JSON.stringify(attendance));
            }
            
            localStorage.setItem('attendanceRequests', JSON.stringify(attendanceRequests));
            showMessage(`Request ${actionText.toLowerCase()}ed successfully!`, 'success');
            loadAttendanceRequests();
        }
        
        // Marks Management Functions
        function loadSubjectsForMarks() {
            const semester = document.getElementById('marksSemester').value;
            const subjectSelect = document.getElementById('marksSubject');
            const marksForm = document.getElementById('marksEntryForm');
            
            if (!semester) {
                subjectSelect.innerHTML = '<option value="">Select Subject</option>';
                marksForm.style.display = 'none';
                return;
            }
            
            const subjects = diplomaSubjects[semester] || [];
            subjectSelect.innerHTML = '<option value="">Select Subject</option>' + 
                subjects.map(subject => `<option value="${subject}">${subject}</option>`).join('');
            
            marksForm.style.display = 'block';
            
            // Add event listener for subject change
            subjectSelect.addEventListener('change', loadExistingMarks);
            
            // Load existing marks if available
            loadExistingMarks();
        }
        
        function loadExistingMarks() {
            const semester = document.getElementById('marksSemester').value;
            const subject = document.getElementById('marksSubject').value;
            
            if (!semester || !subject) return;
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) return;
            
            const existingMarks = studentMarks.find(m => 
                m.studentId === student.studentId && 
                m.semester === semester && 
                m.subject === subject
            );
            
            if (existingMarks) {
                document.getElementById('internal1').value = existingMarks.internal1 || '';
                document.getElementById('internal2').value = existingMarks.internal2 || '';
                document.getElementById('internal3').value = existingMarks.internal3 || '';
                document.getElementById('internal4').value = existingMarks.internal4 || '';
                document.getElementById('internal5').value = existingMarks.internal5 || '';
                document.getElementById('skillTest1').value = existingMarks.skillTest1 || '';
                document.getElementById('skillTest2').value = existingMarks.skillTest2 || '';
                document.getElementById('finalExam').value = existingMarks.finalExam || '';
                
                showMessage('Existing marks loaded for editing', 'info');
            } else {
                // Clear form
                document.getElementById('internal1').value = '';
                document.getElementById('internal2').value = '';
                document.getElementById('internal3').value = '';
                document.getElementById('internal4').value = '';
                document.getElementById('internal5').value = '';
                document.getElementById('skillTest1').value = '';
                document.getElementById('skillTest2').value = '';
                document.getElementById('finalExam').value = '';
            }
        }
        
        function saveMarks() {
            const semester = document.getElementById('marksSemester').value;
            const subject = document.getElementById('marksSubject').value;
            
            if (!semester || !subject) {
                showMessage('Please select semester and subject', 'error');
                return;
            }
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                showMessage('Student record not found', 'error');
                return;
            }
            
            // Validate marks input
            const internal1 = parseFloat(document.getElementById('internal1').value) || 0;
            const internal2 = parseFloat(document.getElementById('internal2').value) || 0;
            const internal3 = parseFloat(document.getElementById('internal3').value) || 0;
            const internal4 = parseFloat(document.getElementById('internal4').value) || 0;
            const internal5 = parseFloat(document.getElementById('internal5').value) || 0;
            const skillTest1 = parseFloat(document.getElementById('skillTest1').value) || 0;
            const skillTest2 = parseFloat(document.getElementById('skillTest2').value) || 0;
            const finalExam = parseFloat(document.getElementById('finalExam').value) || 0;
            
            // Validate marks range (0-100)
            const allMarks = [internal1, internal2, internal3, internal4, internal5, skillTest1, skillTest2, finalExam];
            const invalidMarks = allMarks.filter(mark => mark < 0 || mark > 100);
            
            if (invalidMarks.length > 0) {
                showMessage('All marks must be between 0 and 100', 'error');
                return;
            }
            
            const marksData = {
                id: Date.now(),
                studentId: student.studentId,
                studentName: student.fullName,
                department: student.department,
                year: student.year,
                semester: semester,
                subject: subject,
                internal1: internal1,
                internal2: internal2,
                internal3: internal3,
                internal4: internal4,
                internal5: internal5,
                skillTest1: skillTest1,
                skillTest2: skillTest2,
                finalExam: finalExam,
                enteredAt: new Date().toISOString()
            };
            
            // Calculate totals and averages
            const internalsTotal = marksData.internal1 + marksData.internal2 + marksData.internal3 + marksData.internal4 + marksData.internal5;
            const internalsAverage = internalsTotal / 5;
            const skillTestsAverage = (marksData.skillTest1 + marksData.skillTest2) / 2;
            
            marksData.internalsTotal = internalsTotal;
            marksData.internalsAverage = internalsAverage;
            marksData.skillTestsAverage = skillTestsAverage;
            marksData.totalMarks = internalsAverage + skillTestsAverage + marksData.finalExam;
            
            // Remove existing marks for same student, semester, and subject
            studentMarks = studentMarks.filter(m => 
                !(m.studentId === student.studentId && m.semester === semester && m.subject === subject)
            );
            
            studentMarks.push(marksData);
            localStorage.setItem('studentMarks', JSON.stringify(studentMarks));
            
            showMessage('Marks saved successfully!', 'success');
            
            // Update student's GPA in students array
            updateStudentGPA(student.studentId);
        }
        
        function updateStudentGPA(studentId) {
            const student = students.find(s => s.studentId === studentId);
            if (!student) return;
            
            const studentMarksData = studentMarks.filter(m => m.studentId === studentId);
            
            if (studentMarksData.length > 0) {
                const totalMarks = studentMarksData.reduce((sum, m) => sum + m.totalMarks, 0);
                const averageMarks = totalMarks / studentMarksData.length;
                
                // Convert to GPA scale (0-4)
                let gpa = 0;
                if (averageMarks >= 90) gpa = 4.0;
                else if (averageMarks >= 80) gpa = 3.5;
                else if (averageMarks >= 70) gpa = 3.0;
                else if (averageMarks >= 60) gpa = 2.5;
                else if (averageMarks >= 50) gpa = 2.0;
                else if (averageMarks >= 40) gpa = 1.5;
                else if (averageMarks >= 35) gpa = 1.0;
                else gpa = 0.0;
                
                student.gpa = gpa;
                localStorage.setItem('students', JSON.stringify(students));
            }
        }
        
        function loadStudentMarks() {
            const semester = document.getElementById('viewMarksSemester').value;
            const container = document.getElementById('studentMarksDisplay');
            
            if (!semester) {
                container.innerHTML = '<p class="text-white text-center">Please select a semester to view marks.</p>';
                return;
            }
            
            const student = students.find(s => s.username === currentUser.username);
            if (!student) {
                container.innerHTML = '<p class="text-white text-center">Student record not found.</p>';
                return;
            }
            
            const semesterMarks = studentMarks.filter(m => 
                m.studentId === student.studentId && m.semester === semester
            );
            
            if (semesterMarks.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No marks found for the selected semester.</p>';
                return;
            }
            
            let totalMarks = 0;
            let subjectCount = 0;
            
            const marksHTML = semesterMarks.map(marks => {
                totalMarks += marks.totalMarks;
                subjectCount++;
                
                // Calculate grade for this subject
                let grade = 'F';
                if (marks.totalMarks >= 90) grade = 'A+';
                else if (marks.totalMarks >= 80) grade = 'A';
                else if (marks.totalMarks >= 70) grade = 'B+';
                else if (marks.totalMarks >= 60) grade = 'B';
                else if (marks.totalMarks >= 50) grade = 'C';
                else if (marks.totalMarks >= 40) grade = 'D';
                
                return `
                    <div class="glass-effect rounded-lg p-4 mb-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-white text-lg font-bold">${marks.subject}</h3>
                            <span class="px-3 py-1 rounded-full text-sm font-bold ${
                                grade === 'A+' || grade === 'A' ? 'bg-green-600' :
                                grade === 'B+' || grade === 'B' ? 'bg-blue-600' :
                                grade === 'C' ? 'bg-yellow-600' :
                                grade === 'D' ? 'bg-orange-600' : 'bg-red-600'
                            } text-white">Grade: ${grade}</span>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <h4 class="text-blue-300 font-semibold mb-2">Internal Marks</h4>
                                <div class="space-y-1 text-sm">
                                    <p class="text-white">Internal 1: ${marks.internal1}</p>
                                    <p class="text-white">Internal 2: ${marks.internal2}</p>
                                    <p class="text-white">Internal 3: ${marks.internal3}</p>
                                    <p class="text-white">Internal 4: ${marks.internal4}</p>
                                    <p class="text-white">Internal 5: ${marks.internal5}</p>
                                    <p class="text-green-300 font-semibold">Average: ${marks.internalsAverage.toFixed(2)}</p>
                                </div>
                            </div>
                            
                            <div>
                                <h4 class="text-yellow-300 font-semibold mb-2">Skill Tests</h4>
                                <div class="space-y-1 text-sm">
                                    <p class="text-white">Skill Test 1: ${marks.skillTest1}</p>
                                    <p class="text-white">Skill Test 2: ${marks.skillTest2}</p>
                                    <p class="text-green-300 font-semibold">Average: ${marks.skillTestsAverage.toFixed(2)}</p>
                                </div>
                            </div>
                            
                            <div>
                                <h4 class="text-purple-300 font-semibold mb-2">Final Exam</h4>
                                <div class="space-y-1 text-sm">
                                    <p class="text-white">Final Exam: ${marks.finalExam}</p>
                                    <p class="text-green-300 font-semibold text-lg">Total: ${marks.totalMarks.toFixed(2)}</p>
                                    <p class="text-gray-300 text-xs">Entered: ${new Date(marks.enteredAt).toLocaleDateString()}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            const averageMarks = subjectCount > 0 ? (totalMarks / subjectCount).toFixed(2) : 0;
            
            // Calculate overall grade
            let overallGrade = 'F';
            if (averageMarks >= 90) overallGrade = 'A+';
            else if (averageMarks >= 80) overallGrade = 'A';
            else if (averageMarks >= 70) overallGrade = 'B+';
            else if (averageMarks >= 60) overallGrade = 'B';
            else if (averageMarks >= 50) overallGrade = 'C';
            else if (averageMarks >= 40) overallGrade = 'D';
            
            container.innerHTML = `
                <div class="glass-effect rounded-lg p-4 mb-6 text-center">
                    <h3 class="text-white text-xl font-bold mb-2">Semester ${semester} Summary</h3>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                            <p class="text-blue-300 text-lg font-semibold">${subjectCount}</p>
                            <p class="text-gray-300">Subjects</p>
                        </div>
                        <div>
                            <p class="text-green-300 text-lg font-semibold">${totalMarks.toFixed(2)}</p>
                            <p class="text-gray-300">Total Marks</p>
                        </div>
                        <div>
                            <p class="text-yellow-300 text-lg font-semibold">${averageMarks}</p>
                            <p class="text-gray-300">Average</p>
                        </div>
                        <div>
                            <p class="text-purple-300 text-lg font-semibold">${overallGrade}</p>
                            <p class="text-gray-300">Overall Grade</p>
                        </div>
                    </div>
                </div>
                ${marksHTML}
            `;
        }
        
        function loadMarksManagement() {
            const department = document.getElementById('marksManagementDept').value;
            const year = document.getElementById('marksManagementYear').value;
            const semester = document.getElementById('marksManagementSemester').value;
            const container = document.getElementById('marksManagementList');
            
            let filteredStudents = students.filter(student => {
                let matches = true;
                if (department) matches = matches && student.department === department;
                if (year) matches = matches && student.year === year;
                return matches;
            });
            
            if (filteredStudents.length === 0) {
                container.innerHTML = '<p class="text-white text-center">No students found for the selected criteria.</p>';
                return;
            }
            
            const studentsWithMarks = filteredStudents.map(student => {
                const studentMarksData = studentMarks.filter(m => 
                    m.studentId === student.studentId && 
                    (!semester || m.semester === semester)
                );
                
                return {
                    student: student,
                    marks: studentMarksData,
                    totalSubjects: studentMarksData.length,
                    averageMarks: studentMarksData.length > 0 ? 
                        (studentMarksData.reduce((sum, m) => sum + m.totalMarks, 0) / studentMarksData.length).toFixed(2) : 0
                };
            });
            
            container.innerHTML = `
                <div class="overflow-x-auto">
                    <table class="w-full text-white">
                        <thead>
                            <tr class="border-b border-white/30">
                                <th class="text-left p-3">Student Name</th>
                                <th class="text-left p-3">Register Number</th>
                                <th class="text-left p-3">Department</th>
                                <th class="text-left p-3">Year</th>
                                <th class="text-left p-3">Subjects Entered</th>
                                <th class="text-left p-3">Average Marks</th>
                                <th class="text-left p-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${studentsWithMarks.map(data => `
                                <tr class="border-b border-white/20 hover:bg-white/10 transition-colors">
                                    <td class="p-3">${data.student.fullName}</td>
                                    <td class="p-3">${data.student.studentId}</td>
                                    <td class="p-3">${data.student.department}</td>
                                    <td class="p-3">${data.student.year}</td>
                                    <td class="p-3">${data.totalSubjects}</td>
                                    <td class="p-3">
                                        <span class="px-2 py-1 rounded-full text-sm ${data.averageMarks >= 75 ? 'bg-green-600' : data.averageMarks >= 60 ? 'bg-yellow-600' : 'bg-red-600'}">
                                            ${data.averageMarks}
                                        </span>
                                    </td>
                                    <td class="p-3">
                                        <button onclick="viewStudentMarksAdmin('${data.student.studentId}')" class="bg-blue-600 text-white px-3 py-1 rounded mr-2 hover:bg-blue-700 transition-colors">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                        <button onclick="editStudentMarksAdmin('${data.student.studentId}')" class="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 transition-colors">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        }
        
        function viewStudentMarksAdmin(studentId) {
            const student = students.find(s => s.studentId === studentId);
            const marks = studentMarks.filter(m => m.studentId === studentId);
            
            if (!student) return;
            
            let modalHTML = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-96 overflow-y-auto">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-bold text-gray-800">${student.fullName} - Marks Report</h3>
                            <button onclick="closeModal()" class="text-gray-600 hover:text-gray-800">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                        
                        <div class="space-y-4">
                            ${marks.length === 0 ? '<p class="text-gray-600">No marks entered yet.</p>' : 
                                marks.map(mark => `
                                    <div class="border rounded-lg p-4">
                                        <h4 class="font-semibold text-gray-800 mb-2">Semester ${mark.semester} - ${mark.subject}</h4>
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                            <div>
                                                <p class="font-semibold text-blue-600">Internals:</p>
                                                <p>I1: ${mark.internal1}, I2: ${mark.internal2}, I3: ${mark.internal3}</p>
                                                <p>I4: ${mark.internal4}, I5: ${mark.internal5}</p>
                                                <p class="font-semibold">Avg: ${mark.internalsAverage.toFixed(2)}</p>
                                            </div>
                                            <div>
                                                <p class="font-semibold text-yellow-600">Skill Tests:</p>
                                                <p>ST1: ${mark.skillTest1}, ST2: ${mark.skillTest2}</p>
                                                <p class="font-semibold">Avg: ${mark.skillTestsAverage.toFixed(2)}</p>
                                            </div>
                                            <div>
                                                <p class="font-semibold text-purple-600">Final: ${mark.finalExam}</p>
                                                <p class="font-semibold text-green-600 text-lg">Total: ${mark.totalMarks.toFixed(2)}</p>
                                            </div>
                                        </div>
                                    </div>
                                `).join('')
                            }
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }
        
        function closeModal() {
            const modal = document.querySelector('.fixed.inset-0');
            if (modal) modal.remove();
        }

        function searchStudentByRegNumber() {
            const regNumber = document.getElementById('searchRegNumber').value.trim();
            const container = document.getElementById('studentSearchResults');
            
            if (!regNumber) {
                showMessage('Please enter a register number to search', 'error');
                return;
            }
            
            const student = students.find(s => s.studentId === regNumber);
            
            if (!student) {
                container.innerHTML = '<p class="text-white text-center">No student found with register number: ' + regNumber + '</p>';
                return;
            }
            
            // Get student's attendance data
            const studentAttendance = attendance.filter(a => a.studentId === regNumber);
            const presentDays = studentAttendance.filter(a => a.status === 'present').length;
            const totalDays = studentAttendance.length;
            const attendancePercentage = totalDays > 0 ? ((presentDays / totalDays) * 100).toFixed(1) : 0;
            
            // Get student's marks data
            const studentMarksData = studentMarks.filter(m => m.studentId === regNumber);
            const totalSubjects = studentMarksData.length;
            const averageMarks = totalSubjects > 0 ? 
                (studentMarksData.reduce((sum, m) => sum + m.totalMarks, 0) / totalSubjects).toFixed(2) : 0;
            
            // Get student's attendance requests
            const studentRequests = attendanceRequests.filter(r => r.studentId === regNumber);
            
            container.innerHTML = `
                <div class="glass-effect rounded-lg p-6">
                    <div class="flex items-center justify-between mb-6">
                        <div>
                            <h3 class="text-2xl font-bold text-white">${student.fullName}</h3>
                            <p class="text-blue-300 text-lg font-semibold">Register Number: ${student.studentId}</p>
                            <p class="text-gray-300">Username: ${student.username}</p>
                        </div>
                        <div class="text-right">
                            <span class="bg-blue-600 text-white px-4 py-2 rounded-full text-sm font-bold">
                                ${student.department} - Year ${student.year}
                            </span>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="bg-blue-600/30 rounded-lg p-4 text-center">
                            <h4 class="text-white font-bold text-lg">${attendancePercentage}%</h4>
                            <p class="text-blue-200">Attendance</p>
                            <p class="text-blue-300 text-sm">${presentDays}/${totalDays} days</p>
                        </div>
                        <div class="bg-green-600/30 rounded-lg p-4 text-center">
                            <h4 class="text-white font-bold text-lg">${averageMarks}</h4>
                            <p class="text-green-200">Average Marks</p>
                            <p class="text-green-300 text-sm">${totalSubjects} subjects</p>
                        </div>
                        <div class="bg-yellow-600/30 rounded-lg p-4 text-center">
                            <h4 class="text-white font-bold text-lg">${studentRequests.length}</h4>
                            <p class="text-yellow-200">Total Requests</p>
                            <p class="text-yellow-300 text-sm">Attendance updates</p>
                        </div>
                        <div class="bg-purple-600/30 rounded-lg p-4 text-center">
                            <h4 class="text-white font-bold text-lg">${student.semester}</h4>
                            <p class="text-purple-200">Current Semester</p>
                            <p class="text-purple-300 text-sm">Academic progress</p>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div class="bg-white/10 rounded-lg p-4">
                            <h4 class="text-white font-bold mb-3">Personal Information</h4>
                            <div class="space-y-2 text-sm">
                                <p class="text-gray-300"><strong>Email:</strong> ${student.email}</p>
                                <p class="text-gray-300"><strong>Phone:</strong> ${student.phone || 'Not provided'}</p>
                                <p class="text-gray-300"><strong>Department:</strong> ${student.department}</p>
                                <p class="text-gray-300"><strong>Year:</strong> ${student.year}</p>
                                <p class="text-gray-300"><strong>Semester:</strong> ${student.semester}</p>
                                <p class="text-gray-300"><strong>GPA:</strong> ${student.gpa.toFixed(2)}</p>
                                <p class="text-gray-300"><strong>Joined:</strong> ${new Date(student.dateAdded).toLocaleDateString()}</p>
                            </div>
                        </div>
                        
                        <div class="bg-white/10 rounded-lg p-4">
                            <h4 class="text-white font-bold mb-3">Recent Activity</h4>
                            <div class="space-y-2 text-sm">
                                ${studentRequests.slice(-3).map(req => `
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-300">Attendance request</span>
                                        <span class="px-2 py-1 rounded text-xs ${
                                            req.status === 'approved' ? 'bg-green-600' : 
                                            req.status === 'rejected' ? 'bg-red-600' : 'bg-yellow-600'
                                        } text-white">${req.status}</span>
                                    </div>
                                `).join('') || '<p class="text-gray-400">No recent activity</p>'}
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex space-x-4">
                        <button onclick="viewStudentMarksAdmin('${student.studentId}')" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors">
                            <i class="fas fa-chart-bar mr-2"></i>View Marks
                        </button>
                        <button onclick="viewStudentAttendanceAdmin('${student.studentId}')" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors">
                            <i class="fas fa-calendar-check mr-2"></i>View Attendance
                        </button>
                        <button onclick="editStudent(${student.id})" class="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors">
                            <i class="fas fa-edit mr-2"></i>Edit Student
                        </button>
                    </div>
                </div>
            `;
        }

        function viewStudentAttendanceAdmin(studentId) {
            const student = students.find(s => s.studentId === studentId);
            const studentAttendanceRecords = attendance.filter(a => a.studentId === studentId);
            
            if (!student) return;
            
            let modalHTML = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-96 overflow-y-auto">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-bold text-gray-800">${student.fullName} - Attendance Record</h3>
                            <button onclick="closeModal()" class="text-gray-600 hover:text-gray-800">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                        
                        <div class="space-y-4">
                            ${studentAttendanceRecords.length === 0 ? '<p class="text-gray-600">No attendance records found.</p>' : 
                                `<div class="overflow-x-auto">
                                    <table class="w-full text-sm">
                                        <thead>
                                            <tr class="border-b">
                                                <th class="text-left p-2">Date</th>
                                                <th class="text-left p-2">Status</th>
                                                <th class="text-left p-2">Marked By</th>
                                                <th class="text-left p-2">Time</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${studentAttendanceRecords.slice(-20).map(record => `
                                                <tr class="border-b">
                                                    <td class="p-2">${record.date}</td>
                                                    <td class="p-2">
                                                        <span class="px-2 py-1 rounded text-xs ${
                                                            record.status === 'present' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                                        }">${record.status}</span>
                                                    </td>
                                                    <td class="p-2">${record.markedBy}</td>
                                                    <td class="p-2">${new Date(record.timestamp).toLocaleString()}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>`
                            }
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        // Initialize App
        document.addEventListener('DOMContentLoaded', function() {
            // Show install popup immediately on mobile
            if (isMobileDevice() && !localStorage.getItem('installPromptShown')) {
                setTimeout(() => {
                    showInstallPopup();
                }, 1000);
            }
            
            // Check if user is already logged in
            if (currentUser) {
                document.getElementById('authSection').style.display = 'none';
                document.getElementById('app').style.display = 'block';
                updateUserInterface();
            }
            
            // Add sample admin if no users exist
            if (users.length === 0) {
                const sampleAdmin = {
                    id: 1,
                    accountType: 'admin',
                    fullName: 'System Administrator',
                    username: 'admin',
                    email: 'admin@sspt.edu.in',
                    phone: '555-0000',
                    role: 'Principal',
                    password: 'admin123',
                    dateCreated: new Date().toISOString()
                };
                
                users.push(sampleAdmin);
                localStorage.setItem('users', JSON.stringify(users));
                
                showMessage('Demo admin created: admin / admin123', 'info');
            }
            
            // Add sample students if none exist
            if (students.length === 0) {
                const sampleStudents = [
                    {
                        id: 2,
                        fullName: "Rahul Kumar",
                        studentId: "485CS23054",
                        username: "rahul_kumar",
                        email: "rahul@sspt.edu.in",
                        phone: "9876543210",
                        department: "CS",
                        year: "2",
                        semester: "3",
                        gpa: 3.8,
                        address: "123 Main St, Tiptur",
                        dateAdded: new Date().toISOString()
                    },
                    {
                        id: 3,
                        fullName: "Priya Sharma",
                        studentId: "485EC23055",
                        username: "priya_sharma",
                        email: "priya@sspt.edu.in",
                        phone: "9876543211",
                        department: "EC",
                        year: "2",
                        semester: "3",
                        gpa: 3.6,
                        address: "456 Oak Ave, Tiptur",
                        dateAdded: new Date().toISOString()
                    },
                    {
                        id: 4,
                        fullName: "Amit Singh",
                        studentId: "485ME23056",
                        username: "amit_singh",
                        email: "amit@sspt.edu.in",
                        phone: "9876543212",
                        department: "ME",
                        year: "1",
                        semester: "2",
                        gpa: 3.4,
                        address: "789 Pine St, Tiptur",
                        dateAdded: new Date().toISOString()
                    }
                ];
                
                students = sampleStudents;
                localStorage.setItem('students', JSON.stringify(students));
                
                // Add corresponding user accounts for sample students
                const sampleStudentUsers = [
                    {
                        id: 2,
                        accountType: 'student',
                        fullName: 'Rahul Kumar',
                        username: 'rahul_kumar',
                        email: 'rahul@sspt.edu.in',
                        phone: '9876543210',
                        department: 'CS',
                        year: '2',
                        semester: '3',
                        registerNumber: '485CS23054',
                        password: 'student123',
                        dateCreated: new Date().toISOString()
                    },
                    {
                        id: 3,
                        accountType: 'student',
                        fullName: 'Priya Sharma',
                        username: 'priya_sharma',
                        email: 'priya@sspt.edu.in',
                        phone: '9876543211',
                        department: 'EC',
                        year: '2',
                        semester: '3',
                        registerNumber: '485EC23055',
                        password: 'student123',
                        dateCreated: new Date().toISOString()
                    },
                    {
                        id: 4,
                        accountType: 'student',
                        fullName: 'Amit Singh',
                        username: 'amit_singh',
                        email: 'amit@sspt.edu.in',
                        phone: '9876543212',
                        department: 'ME',
                        year: '1',
                        semester: '2',
                        registerNumber: '485ME23056',
                        password: 'student123',
                        dateCreated: new Date().toISOString()
                    }
                ];
                
                users.push(...sampleStudentUsers);
                localStorage.setItem('users', JSON.stringify(users));
                
                // Add sample attendance data
                const sampleAttendance = [];
                const today = new Date();
                
                for (let i = 0; i < 30; i++) {
                    const date = new Date(today);
                    date.setDate(date.getDate() - i);
                    const dateStr = date.toISOString().split('T')[0];
                    
                    sampleStudents.forEach(student => {
                        // Random attendance with 80% present probability
                        const isPresent = Math.random() > 0.2;
                        
                        sampleAttendance.push({
                            id: Date.now() + Math.random(),
                            studentId: student.studentId,
                            studentName: student.fullName,
                            department: student.department,
                            year: student.year,
                            semester: student.semester,
                            date: dateStr,
                            status: isPresent ? 'present' : 'absent',
                            markedBy: 'admin',
                            timestamp: new Date().toISOString()
                        });
                    });
                }
                
                attendance = sampleAttendance;
                localStorage.setItem('attendance', JSON.stringify(attendance));
                
                // Add sample marks data
                const sampleMarks = [];
                
                sampleStudents.forEach(student => {
                    const currentSemester = parseInt(student.semester);
                    
                    // Add marks for previous semesters
                    for (let sem = 1; sem <= currentSemester; sem++) {
                        const subjects = diplomaSubjects[sem] || [];
                        
                        subjects.forEach(subject => {
                            // Generate random but realistic marks
                            const baseScore = 60 + Math.random() * 35; // 60-95 range
                            
                            const marksData = {
                                id: Date.now() + Math.random(),
                                studentId: student.studentId,
                                studentName: student.fullName,
                                department: student.department,
                                year: student.year,
                                semester: sem.toString(),
                                subject: subject,
                                internal1: Math.round(baseScore + (Math.random() - 0.5) * 10),
                                internal2: Math.round(baseScore + (Math.random() - 0.5) * 10),
                                internal3: Math.round(baseScore + (Math.random() - 0.5) * 10),
                                internal4: Math.round(baseScore + (Math.random() - 0.5) * 10),
                                internal5: Math.round(baseScore + (Math.random() - 0.5) * 10),
                                skillTest1: Math.round(baseScore + (Math.random() - 0.5) * 15),
                                skillTest2: Math.round(baseScore + (Math.random() - 0.5) * 15),
                                finalExam: Math.round(baseScore + (Math.random() - 0.5) * 20),
                                enteredAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()
                            };
                            
                            // Calculate totals and averages
                            const internalsTotal = marksData.internal1 + marksData.internal2 + marksData.internal3 + marksData.internal4 + marksData.internal5;
                            const internalsAverage = internalsTotal / 5;
                            const skillTestsAverage = (marksData.skillTest1 + marksData.skillTest2) / 2;
                            
                            marksData.internalsTotal = internalsTotal;
                            marksData.internalsAverage = internalsAverage;
                            marksData.skillTestsAverage = skillTestsAverage;
                            marksData.totalMarks = internalsAverage + skillTestsAverage + marksData.finalExam;
                            
                            sampleMarks.push(marksData);
                        });
                    }
                });
                
                studentMarks = sampleMarks;
                localStorage.setItem('studentMarks', JSON.stringify(studentMarks));
                
                // Update student GPAs based on marks
                sampleStudents.forEach(student => {
                    updateStudentGPA(student.studentId);
                });
                
                showMessage('Sample data created for testing', 'info');
            }
        });

        // Service Worker Registration (for PWA)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                const swCode = `
                    const CACHE_NAME = 'student-hub-v1';
                    const urlsToCache = ['/'];
                    
                    self.addEventListener('install', event => {
                        event.waitUntil(
                            caches.open(CACHE_NAME)
                                .then(cache => cache.addAll(urlsToCache))
                        );
                    });
                    
                    self.addEventListener('fetch', event => {
                        event.respondWith(
                            caches.match(event.request)
                                .then(response => response || fetch(event.request))
                        );
                    });
                `;
                
                const swBlob = new Blob([swCode], {type: 'application/javascript'});
                const swUrl = URL.createObjectURL(swBlob);
                
                navigator.serviceWorker.register(swUrl)
                    .then(registration => console.log('SW registered'))
                    .catch(error => console.log('SW registration failed'));
            });
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97c7699595ad3d25',t:'MTc1NzQyODUzMC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
